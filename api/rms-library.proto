syntax = "proto3";
import "google/protobuf/empty.proto";

option go_package = "../rms-library";

service Movies {
  // поиск информации о фильмах и сериалах во внешних источниках
  rpc Search(SearchRequest) returns (SearchMovieResponse);

  // скачать указанный фильм или сериал в автоматическом режиме
  rpc DownloadAuto(DownloadMovieAutoRequest) returns (DownloadMovieAutoResponse);

  // найти варианты раздачи для фильма или сериала
  rpc FindTorrents(FindMovieTorrentsRequest) returns (FindTorrentsResponse);

  // скачать выбранную раздачу
  rpc Download(DownloadTorrentRequest) returns (google.protobuf.Empty);

  // загрузить торрент-файл фильма или сериала или просто ролика
  rpc Upload(UploadMovieRequest) returns (google.protobuf.Empty);

  // получить список фильмов/сериалов и пути к их контенту
  rpc List(GetMoviesRequest) returns (GetMoviesResponse);

  // получить инфу о фильме/сериале, присутствующем в библиотеке по его ID
  rpc Get(GetMovieRequest) returns (GetMovieResponse);

  // удаление фильмов/сериалов
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);

  // получить список доступных новых сезонов для скачивания
  rpc GetTvSeriesUpdates(google.protobuf.Empty) returns (GetTvSeriesUpdatesResponse);

  // добавить медиа в библиотеку с целью скачивания позднее по запросу
  rpc WatchLater(WatchLaterRequest) returns (google.protobuf.Empty);

  // посмотреть, что было добавлено в список на скачивание по запросу
  rpc GetWatchList(GetMoviesRequest) returns (GetMoviesResponse);
}

service Music {
  // поиск информации о музыке во внешних источниках
  rpc Search(SearchRequest) returns (SearchMusicResponse);

  // скачать указанный альбом или дискографию в автоматическом режиме
  rpc DownloadAuto(DownloadMusicAutoRequest) returns (DownloadMusicAutoResponse);

  // найти варианты раздачи для исполнителя или альбома
  rpc FindTorrents(FindMusicTorrentsRequest) returns (FindTorrentsResponse);

  // скачать выбранную раздачу
  rpc Download(DownloadTorrentRequest) returns (google.protobuf.Empty);

  // загрузить торрент-файл альбома или дискографии
  rpc Upload(UploadMusicRequest) returns (google.protobuf.Empty);

  // получить список исполнителей
  rpc List(google.protobuf.Empty) returns (ListArtistsResponse);

  // удаление  исполнителей
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);

  // получить список доступных новых сезонов для скачивания
  rpc GetAlbumsUpdates(google.protobuf.Empty) returns (GetAlbumsUpdatesResponse);

  // добавить медиа в библиотеку с целью скачивания позднее по запросу
  rpc ListenLater(ListenLaterRequest) returns (google.protobuf.Empty);

  // посмотреть, что было добавлено в список на скачивание по запросу
  rpc GetListenList(google.protobuf.Empty) returns (GetListenListResponse);
}

service Torrents {
  // найти на торрентах просто какой то контент без привзяки к типу
  rpc FindTorrents(FindTorrentsRequest) returns (FindTorrentsResponse);

  // скачать указанный торрент
  rpc Download(DownloadTorrentRequest) returns (google.protobuf.Empty);

  // сохранить указанный торрент для дальнейшего скачивания
  rpc Save(DownloadTorrentRequest) returns (google.protobuf.Empty);

  // получить список сохраненных элементов
  rpc GetSavedList(google.protobuf.Empty) returns (FindTorrentsResponse);

  // выкачать сохраненный торрент
  rpc DownloadSavedItem(DownloadTorrentRequest) returns (google.protobuf.Empty);
}

// запрос на поиск во внешних источниках
message SearchRequest {
  string text = 1;
  uint32 limit = 2;
}

// тип медиа - фильм или сериал
enum MovieType {
  TvSeries = 0;
  Film = 1;
  Clip = 2;
}

// структура описывает общую информацию о фильме/сериале
message MovieInfo {
  string title = 1;
  string description = 2;
  uint32 year = 3;
  string poster = 4;
  repeated string genres = 5;
  float rating = 6;
  MovieType type = 7;
  optional uint32 seasons = 8;
  string originalTitle = 9;
}

// результат поиска по внешних источниках
message FoundMovie {
  // сквозной ID фильма/сериала
  string id = 1;

  // общая информация о Movie
  MovieInfo info = 2;

  // информация о скачанных сезонах
  repeated uint32 seasonsDownloaded = 3;
}

// результат поиска - несколько вариантов фильма/сериала
message SearchMovieResponse {
  repeated FoundMovie movies = 1;
}

// раздача на торренте
message Torrent {
  // ID для идентификации данной раздачи
  string id = 1;

  // заголовок раздачи
  string title = 2;

  // размер раздачи в мегабайтах
  uint64 size = 3;

  // кол-во раздающих
  uint32 seeders = 4;
}

// скачать указанный фильм, или сезон сериала
message DownloadMovieAutoRequest {
  // сквозной ID фильма/сериала
  string id = 1;

  // какой сезон скачать, если не указан - скачать отсутствующие в библиотеке сезоны
  optional uint32 season = 2;

  // флаг для более быстрого скачивания
  bool faster = 3;

  // использовать сохраненный список просмотра для поиска раздачи
  bool useWatchList = 4;
}

message DownloadMovieAutoResponse {
  // удалось ли найти раздачи
  bool found = 1;
  // какие сезоны были поставлены на закачку
  repeated uint32 seasons = 2;
}

message FindMovieTorrentsRequest {
  // сквозной ID фильма/сериала
  string id = 1;

  // максимальное кол-во раздач в ответе
  uint32 limit = 2;

  // возможность указать конкретный сезон
  optional uint32 season = 3;

  // использовать сохраненный список просмотра для поиска раздачи
  bool useWatchList = 4;
}

message FindTorrentsRequest {
  // что ищем
  string query = 1;

  // сколько максимум раздач
  uint32 limit = 2;

  // строгое соответствие поисковому запросу
  bool strong = 3;
}

message FindTorrentsResponse {
  // найденные раздачи
  repeated Torrent results = 1;
}

message DownloadTorrentRequest {
  // ID раздачи
  string torrentId = 1;
}

// инфа о новых сезонах одного сериала
message TvSeriesUpdate {
  // сквозной ID фильма/сериала
  string id = 1;

  // общая информация о Movie
  MovieInfo info = 2;

  // перечисление новых доступных сезонов
  repeated uint32 seasonsAvailable = 3;
}

// результат запроса обновления сериалов
message GetTvSeriesUpdatesResponse {
  repeated TvSeriesUpdate updates = 1;
}

// запрос доступных киношек в библиотеке
message GetMoviesRequest {
  // типы медиа которые стоит отобразить
  optional MovieType type = 1;

  // поиск по жанрам
  optional string genre = 2;
}

message FilmLayout {
  string torrentID = 1;
  repeated string files = 2;
}

message TvSeriesLayout {
  message Season {
    repeated string files = 1;
  }
  map<uint32, Season> seasons = 1;
}

message Movie {
  // ID фильма или сериала
  string id = 1;

  // общая информация о Movie
  MovieInfo info = 2;

  // набор файлов фильма
  optional FilmLayout film = 3;

  // набор файлов сериала
  optional TvSeriesLayout tvSeries = 4;

  // Занимаемый на диске размер (МБ)
  uint64 size = 5;
}

message GetMoviesResponse {
  repeated Movie result = 1;
}

message GetMovieRequest {
  string ID = 1;
}

message GetMovieResponse {
  optional Movie result = 1;
}

message DeleteRequest {
  string ID = 1;
}

message UploadMovieRequest {
  // ID фильма или сериала
  string id = 1;

  // общая информация о Movie
  MovieInfo info = 2;

  // номер сезона, если есть
  optional uint32 seasonNo = 3;

  // торрент-файл для загрузки
  bytes torrentFile = 4;
}

message WatchLaterRequest {
  // идентификатор медиа
  string id = 1;
}

message Artist {
  string id = 1;
  string name = 2;
  string poster = 3;
  uint32 albums = 4;
}

message Album {
  string id = 1;
  string name = 2;
  string artist = 3;
  string title = 4;
	string poster = 5;
	string releaseDate = 6;
  repeated string genres = 7;
	uint32 tracks = 8;
}

message SearchMusicResponse {
  repeated Artist artists = 1;
  repeated Album albums = 2;
}

// скачать указанный фильм, или сезон сериала
message DownloadMusicAutoRequest {
  // сквозной ID исполнителя или альбома
  string id = 1;

  // использовать сохраненный список просмотра для поиска раздачи (только для исполнителей)
  bool useWatchList = 2;
}

message DownloadMusicAutoResponse {
  bool found = 1;
}

message FindMusicTorrentsRequest {
  // сквозной ID исполнителя/альбома
  string id = 1;

  // максимальное кол-во раздач в ответе
  uint32 limit = 2;

  // использовать сохраненный список просмотра для поиска раздачи
  bool useWatchList = 3;
}

message UploadMusicRequest {
  // ID исполнителя или альбома
  string id = 1;

  // торрент-файл для загрузки
  bytes torrentFile = 2;
}

message ListArtistsResponse {
  repeated Artist artists = 1;
}

message GetAlbumsUpdatesResponse {
  repeated Album updates = 1;
}

message ListenLaterRequest {
  // ID альбома или исполнителя
  string id = 1;
}

message GetListenListResponse {
  repeated Artist artists = 1;
}


