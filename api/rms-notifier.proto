syntax = "proto3";

import "google/protobuf/empty.proto";
import "communication.proto";
import "google/protobuf/timestamp.proto";

option go_package = "../rms-notifier";

service RmsNotifier {
  // получить текущие настройки
  rpc GetSettings(google.protobuf.Empty) returns (NotifierSettings);

  // обновить настройки
  rpc SetSettings(NotifierSettings) returns (google.protobuf.Empty);

  // получить события пришедшые за период времени в виде контента
  rpc GetJournal(GetJournalRequest) returns (GetJournalResponse);
}

// правило уведомления
message Rule {
  enum Method {
    Telegram = 0;
    Email = 1;
    SMS = 2;
  }
  // как уведомлять
  Method method = 1;

  // адрес получателя
  string destination = 2;
}

// настройки сервиса
message NotifierSettings {
  message Rules {
    repeated Rule rule = 1;
  }

  // включены ли вообще уведомления
  bool enabled = 1;

  // мапим топик на список правил уведомления
  map<string, Rules> rules = 2;

  // интервал фильтрации уведомлений в секундах (если их много)
  uint32 filterInterval = 3;

  // интервал ротации истории уведомлений (дни)
  uint32 rotationInterval = 4;
}

message GetJournalRequest {
  // от какого момента
  optional google.protobuf.Timestamp from = 1;

  // до какого момента
  optional google.protobuf.Timestamp to = 2;

  // сколько
  uint32 limit = 3;
}

message GetJournalResponse {
  message Item {
    enum Severity {
      Debug = 0;
      Info = 1;
      Warning = 2;
      Fault = 3;
    }
    Severity severity = 1;
    string subject = 2;
    string bodyHtml = 3;
    string bodyText = 4;
    optional communication.Attachment attachment = 5;
  }
  repeated Item events = 1;
}