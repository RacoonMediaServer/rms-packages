syntax = "proto3";

import "media.proto";
import "google/protobuf/empty.proto";

option go_package = "../cctv-backend";

service Stream {
  // Добавить URL на медиа поток
  rpc AddStream(AddStreamRequest) returns (AddStreamResponse);

  // Получить ссылку на ретрансляцию потока
  rpc GetStreamUri(GetStreamUriRequest) returns (UriResponse);

  // Удалить поток
  rpc RemoveStream(RemoveStreamRequest) returns (google.protobuf.Empty);
}

service Recording {
  // Поставить поток на запись
  rpc AddRecording(AddRecordingRequest) returns (AddRecordingResponse);

  // Получить ссылку на воспроизведение записи
  rpc GetRecordingUri(GetRecordingUriRequest) returns (UriResponse);

  // Возобновить/остановить запись
  rpc SetRecordingState(SetRecordingStateRequest) returns (google.protobuf.Empty);

  // Установить качество записи (прореживание)
  rpc SetRecordingQuality(SetRecordingQualityRequest) returns (google.protobuf.Empty);

  // Удалить запись
  rpc RemoveRecording(RemoveRecordingRequest) returns (google.protobuf.Empty);
}

service System {
  // Получить бекап настроек, БД и пр.
  rpc GetBackup(google.protobuf.Empty) returns (GetBackupResponse);
}

message AddStreamRequest {
  // Номер камеры в системы (может быть нужен для генерации ID)
  uint32 cameraNo = 1;

  // Порекомендовать текстовый ID для потока
  string adviceId = 2;

  // URL потока
  string url = 3;

  // Расположение камеры
  string Location = 4;
}

message AddStreamResponse {
  // Идентификатор созданного потока
  string streamId = 1;
}

message RemoveStreamRequest {
  // Идентификатор потока
  string streamId = 1;
}

message GetStreamUriRequest {
  // Идентификатор потока
  string streamId = 1;

  // Транспорт для получения потока
  optional media.Transport transport = 2;
}

message UriResponse {
  // URL на поток
  string uri = 1;

  // Реальный транспорт, для которого выдана ссылка
  media.Transport transport = 2;
}

message AddRecordingRequest {
  // Идентификатор потока
  string streamId = 1;

  // Сколько дней хранить архив
  uint32 rotationDays = 2;
}

message AddRecordingResponse {
  // ID записи
  string recordingId = 1;
}

message GetRecordingUriRequest {
  // Идентификатор потока
  string streamId = 1;

  // Транспорт для получения потока
  optional media.Transport transport = 2;

  // С какого времени играть запись (Unix time, UTC)
  uint64 timestamp = 3;
}

message SetRecordingStateRequest {
  // ID записи
  string recordingId = 1;

  // Зпись на паузе или нет
  bool pause = 2;
}

message SetRecordingQualityRequest {
  // ID записи
  string recordingId = 1;

  // Качество записи (0 - как есть, 1 - прорежено до 1 опорного кдра/GOP, 2 - до 1 опорного кадра из 2х GOP)
  uint32 quality = 2;
}

message RemoveRecordingRequest {
  // ID записи
  string recordingId = 1;

  // Сохранить ли записанные на диск данные
  bool saveRecordedData = 2;
}

message GetBackupResponse {
  // Данные бекапа
  bytes rawData = 1;

  // MIME тип
  string mimeType = 2;
}