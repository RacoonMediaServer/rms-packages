syntax = "proto3";

import "media.proto";
import "google/protobuf/empty.proto";

option go_package = "../rms-cctv";

service Settings {
  // получить настройки сервиса
  rpc GetSettings(google.protobuf.Empty) returns (CctvSettings);

  // установить настройки сервиса
  rpc SetSettings(CctvSettings) returns (google.protobuf.Empty);
}

service Cameras {
  // получить список камер
  rpc GetCameras(google.protobuf.Empty) returns(GetCamerasResponse);

  // Добавить камеру
  rpc AddCamera(Camera) returns(AddCameraResponse);

  // Изменить настройки камеры
  rpc ModifyCamera(ModifyCameraRequest) returns(google.protobuf.Empty);

  // Удалить камеру
  rpc DeleteCamera(DeleteCameraRequest) returns(google.protobuf.Empty);

  // Получить URI для проигрывания
  rpc GetLiveUri(GetLiveUriRequest) returns(GetUriResponse);

  // Получить URI для проигрывания архива
  rpc GetReplayUri(GetReplayUriRequest) returns (GetUriResponse);

  // Получить изображение с камеры
  rpc GetSnapshot(GetSnapshotRequest) returns (GetSnapshotResponse);

  // Установить режим "никого нет дома"
  rpc SetNobodyAtHomeMode(SetNobodyAtHomeModeRequest) returns (google.protobuf.Empty);
}

service Schedules {
  // Получить список расписаний
  rpc GetSchedulesList(google.protobuf.Empty) returns (GetScheduleListResponse);

  // Получить инфу о расписании
  rpc GetSchedule(GetScheduleRequest) returns (Schedule);

  // Создать расписание
  rpc AddSchedule(Schedule) returns (AddScheduleResponse);

  // Изменить расписание
  rpc ModifySchedule(Schedule) returns (google.protobuf.Empty);

  // Удалить расписание
  rpc DeleteSchedule(DeleteScheduleRequest) returns (google.protobuf.Empty);
}

message CctvSettings {
  uint32 EventNotifyThresholdIntervalSec = 1;
  uint32 OneEventDefaultDurationSec = 2;
}

// Режим записи камеры в архив
enum RecordingMode {
  // Не писать
  Never = 0;
  // Всегда писать
  Always = 1;
  // Пишем, только если сработало событие
  ByEvents = 2;
  // Пишем с прореживанием, когда сработало событие - все кадры
  Optimal = 3;
  // Пишем в соответсвии с расписанием
  BySchedule = 4;
}

message Camera {
  // Внутренний идентификатор камеры
  uint32 id = 1;

  // Видимое имя камеры
  string name = 2;

  // URL для доступа к камере (HTTP)
  string url = 3;

  // Имя пользователя
  string user = 4;

  // Пароль
  string password = 5;

  // Сколько дней хранить архив
  uint32 keepDays = 6;

  // Режим записи
  RecordingMode mode = 7;

  // Расписание уведомлений (идентификатор)
  string schedule = 8;
}

message GetCamerasResponse {
  // Список камер
  repeated Camera cameras = 1;
}

message AddCameraResponse {
  // ID камеры
  uint32 cameraId = 1;
}

message DeleteCameraRequest {
  // ID камеры
  uint32 cameraId = 1;
}

message GetLiveUriRequest {
  // ID камеры
  uint32 cameraId = 1;

  // Протокол для формирования ссылки
  media.Transport transport = 2;

  // Брать ли поток с наилучшим качеством
  bool mainProfile = 3;
}

message GetUriResponse {
  // URI для воспроизведения
  string uri = 1;
}

message GetReplayUriRequest {
  // ID камеры
  uint32 cameraId = 1;

  // Протокол для формирования ссылки
  media.Transport transport = 2;

  // С какого момента начать показывать запись
  optional uint64 timestamp = 3;
}

message GetSnapshotRequest {
  // ID камеры
  uint32 cameraId = 1;
}

message GetSnapshotResponse {
  // JPEG-изображение
  bytes snapshot = 1;
}

message ModifyCameraRequest {
  // Внутренний идентификатор камеры
  uint32 id = 1;

  // Имя камеры
  string name = 2;

  // Сколько дней хранить архив
  uint32 keepDays = 3;

  // Режим записи
  RecordingMode mode = 4;

  // Расписание уведомлений (идентификатор)
  string schedule = 5;
}

message SetNobodyAtHomeModeRequest {
  // Активен ли режим
  bool active = 1;
}

message Schedule {
  // Идентификатор расписания
  string id = 1;

  // Человеко-читаемое название
  string name = 2;

  // Итервалы расписания в формате JSON
  string content = 3;
}

message AddScheduleResponse {
  // Идентификатор расписания
  string id = 1;
}

message GetScheduleListResponse {
  repeated Schedule result = 1;
}

message GetScheduleRequest {
  // Идентификатор расписания
  string id = 1;
}

message DeleteScheduleRequest {
  // Идентификатор расписания
  string id = 1;
}