syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "../rms-cctv";

service RmsCctv {
  // получить настройки сервиса
  rpc GetSettings(google.protobuf.Empty) returns (CctvSettings);

  // установить настройки сервиса
  rpc SetSettings(CctvSettings) returns (google.protobuf.Empty);

  // получить список камер
  rpc GetCameras(google.protobuf.Empty) returns(GetCamerasResponse);

  // Добавить камеру
  rpc AddCamera(Camera) returns(AddCameraResponse);

  // Изменить настройки камеры
  rpc ModifyCamera(Camera) returns(google.protobuf.Empty);

  // Удалить камеру
  rpc DeleteCamera(DeleteCameraRequest) returns(google.protobuf.Empty);

  // Получить URI для проигрывания
  rpc GetLiveUri(GetLiveUriRequest) returns(GetLiveUriResponse);

  // Получить URI для проигрывания архива
  rpc GetReplayUri(GetReplayUriRequest) returns (GetReplayUriRequest);

  // Получить изображение с камеры
  rpc GetSnapshot(GetSnapshotRequest) returns (GetSnapshotResponse);
}

message CctvSettings {
  uint32 EventNotifyThresholdIntervalSec = 1;
  uint32 OneEventDefaultDurationSec = 2;
}

// Режим записи камеры в архив
enum RecordingMode {
  // Не писать
  Never = 0;
  // Всегда писать
  Always = 1;
  // Пишем, только если сработало событие
  ByEvents = 2;
  // Пишем с прореживанием, когда сработало событие - все кадры
  Optimal = 3;
}

enum VideoTransport {
  RTSP = 0;
  HTTP_HLS_MPEGTS = 1;
  HTTP_HLS_MP4 = 2;
  HTTP_HLS_ONE_CHUNK = 3;
  HTTP_MP4 = 4;
  HTTP_FLV = 5;
  HTTP_MPEGTS = 6;
  HTTP_DASH = 7;
}

message Camera {
  // Внутренний идентификатор камеры
  uint32 id = 1;

  // Видимое имя камеры
  string name = 2;

  // URL для доступа к камере (HTTP)
  string url = 3;

  // Имя пользователя
  string user = 4;

  // Пароль
  string password = 5;

  // Сколько дней хранить архив
  uint32 keepDays = 6;

  // Режим записи
  RecordingMode mode = 7;

  // Расписание уведомлений (в формате iCal)
  string schedule = 8;
}

message GetCamerasResponse {
  // Список камер
  repeated Camera cameras = 1;
}

message AddCameraResponse {
  // ID камеры
  uint32 cameraId = 1;
}

message DeleteCameraRequest {
  // ID камеры
  uint32 cameraId = 1;
}

message GetLiveUriRequest {
  // ID камеры
  uint32 cameraId = 1;

  // Протокол для формирования ссылки
  VideoTransport transport = 2;
}

message GetLiveUriResponse {
  // URI для воспроизведения
  string uri = 1;
}

message GetReplayUriRequest {
  // ID камеры
  uint32 cameraId = 1;

  // Протокол для формирования ссылки
  VideoTransport transport = 2;

  // С какого момента начать показывать запись
  google.protobuf.Timestamp timestamp = 3;
}

message GetSnapshotRequest {
  // ID камеры
  uint32 cameraId = 1;
}

message GetSnapshotResponse {
  // JPEG-изображение
  bytes snapshot = 1;
}