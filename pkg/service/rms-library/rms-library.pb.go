// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.1
// source: rms-library.proto

package rms_library

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// тип медиа - фильм или сериал
type MovieType int32

const (
	MovieType_TvSeries MovieType = 0
	MovieType_Film     MovieType = 1
	MovieType_Clip     MovieType = 2
)

// Enum value maps for MovieType.
var (
	MovieType_name = map[int32]string{
		0: "TvSeries",
		1: "Film",
		2: "Clip",
	}
	MovieType_value = map[string]int32{
		"TvSeries": 0,
		"Film":     1,
		"Clip":     2,
	}
)

func (x MovieType) Enum() *MovieType {
	p := new(MovieType)
	*p = x
	return p
}

func (x MovieType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovieType) Descriptor() protoreflect.EnumDescriptor {
	return file_rms_library_proto_enumTypes[0].Descriptor()
}

func (MovieType) Type() protoreflect.EnumType {
	return &file_rms_library_proto_enumTypes[0]
}

func (x MovieType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MovieType.Descriptor instead.
func (MovieType) EnumDescriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{0}
}

// запрос на поиск во внешних источниках
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SearchRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// структура описывает общую информацию о фильме/сериале
type MovieInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Year          uint32    `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	Poster        string    `protobuf:"bytes,4,opt,name=poster,proto3" json:"poster,omitempty"`
	Genres        []string  `protobuf:"bytes,5,rep,name=genres,proto3" json:"genres,omitempty"`
	Rating        float32   `protobuf:"fixed32,6,opt,name=rating,proto3" json:"rating,omitempty"`
	Type          MovieType `protobuf:"varint,7,opt,name=type,proto3,enum=MovieType" json:"type,omitempty"`
	Seasons       *uint32   `protobuf:"varint,8,opt,name=seasons,proto3,oneof" json:"seasons,omitempty"`
	OriginalTitle string    `protobuf:"bytes,9,opt,name=originalTitle,proto3" json:"originalTitle,omitempty"`
}

func (x *MovieInfo) Reset() {
	*x = MovieInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieInfo) ProtoMessage() {}

func (x *MovieInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieInfo.ProtoReflect.Descriptor instead.
func (*MovieInfo) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{1}
}

func (x *MovieInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovieInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MovieInfo) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *MovieInfo) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *MovieInfo) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *MovieInfo) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *MovieInfo) GetType() MovieType {
	if x != nil {
		return x.Type
	}
	return MovieType_TvSeries
}

func (x *MovieInfo) GetSeasons() uint32 {
	if x != nil && x.Seasons != nil {
		return *x.Seasons
	}
	return 0
}

func (x *MovieInfo) GetOriginalTitle() string {
	if x != nil {
		return x.OriginalTitle
	}
	return ""
}

// результат поиска по внешних источниках
type FoundMovie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// сквозной ID фильма/сериала
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// общая информация о Movie
	Info *MovieInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// информация о скачанных сезонах
	SeasonsDownloaded []uint32 `protobuf:"varint,3,rep,packed,name=seasonsDownloaded,proto3" json:"seasonsDownloaded,omitempty"`
}

func (x *FoundMovie) Reset() {
	*x = FoundMovie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoundMovie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoundMovie) ProtoMessage() {}

func (x *FoundMovie) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoundMovie.ProtoReflect.Descriptor instead.
func (*FoundMovie) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{2}
}

func (x *FoundMovie) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FoundMovie) GetInfo() *MovieInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FoundMovie) GetSeasonsDownloaded() []uint32 {
	if x != nil {
		return x.SeasonsDownloaded
	}
	return nil
}

// результат поиска - несколько вариантов фильма/сериала
type SearchMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movies []*FoundMovie `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
}

func (x *SearchMovieResponse) Reset() {
	*x = SearchMovieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMovieResponse) ProtoMessage() {}

func (x *SearchMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMovieResponse.ProtoReflect.Descriptor instead.
func (*SearchMovieResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{3}
}

func (x *SearchMovieResponse) GetMovies() []*FoundMovie {
	if x != nil {
		return x.Movies
	}
	return nil
}

// раздача на торренте
type Torrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID для идентификации данной раздачи
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// заголовок раздачи
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// размер раздачи в мегабайтах
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// кол-во раздающих
	Seeders uint32 `protobuf:"varint,4,opt,name=seeders,proto3" json:"seeders,omitempty"`
}

func (x *Torrent) Reset() {
	*x = Torrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Torrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Torrent) ProtoMessage() {}

func (x *Torrent) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Torrent.ProtoReflect.Descriptor instead.
func (*Torrent) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{4}
}

func (x *Torrent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Torrent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Torrent) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Torrent) GetSeeders() uint32 {
	if x != nil {
		return x.Seeders
	}
	return 0
}

// скачать указанный фильм, или сезон сериала
type DownloadMovieAutoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// сквозной ID фильма/сериала
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// какой сезон скачать, если не указан - скачать отсутствующие в библиотеке сезоны
	Season *uint32 `protobuf:"varint,2,opt,name=season,proto3,oneof" json:"season,omitempty"`
	// флаг для более быстрого скачивания
	Faster bool `protobuf:"varint,3,opt,name=faster,proto3" json:"faster,omitempty"`
	// использовать сохраненный список просмотра для поиска раздачи
	UseWatchList bool `protobuf:"varint,4,opt,name=useWatchList,proto3" json:"useWatchList,omitempty"`
}

func (x *DownloadMovieAutoRequest) Reset() {
	*x = DownloadMovieAutoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadMovieAutoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadMovieAutoRequest) ProtoMessage() {}

func (x *DownloadMovieAutoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadMovieAutoRequest.ProtoReflect.Descriptor instead.
func (*DownloadMovieAutoRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{5}
}

func (x *DownloadMovieAutoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DownloadMovieAutoRequest) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *DownloadMovieAutoRequest) GetFaster() bool {
	if x != nil {
		return x.Faster
	}
	return false
}

func (x *DownloadMovieAutoRequest) GetUseWatchList() bool {
	if x != nil {
		return x.UseWatchList
	}
	return false
}

type DownloadMovieAutoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// удалось ли найти раздачи
	Found bool `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	// какие сезоны были поставлены на закачку
	Seasons []uint32 `protobuf:"varint,2,rep,packed,name=seasons,proto3" json:"seasons,omitempty"`
}

func (x *DownloadMovieAutoResponse) Reset() {
	*x = DownloadMovieAutoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadMovieAutoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadMovieAutoResponse) ProtoMessage() {}

func (x *DownloadMovieAutoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadMovieAutoResponse.ProtoReflect.Descriptor instead.
func (*DownloadMovieAutoResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadMovieAutoResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *DownloadMovieAutoResponse) GetSeasons() []uint32 {
	if x != nil {
		return x.Seasons
	}
	return nil
}

type FindMovieTorrentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// сквозной ID фильма/сериала
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// максимальное кол-во раздач в ответе
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// возможность указать конкретный сезон
	Season *uint32 `protobuf:"varint,3,opt,name=season,proto3,oneof" json:"season,omitempty"`
	// использовать сохраненный список просмотра для поиска раздачи
	UseWatchList bool `protobuf:"varint,4,opt,name=useWatchList,proto3" json:"useWatchList,omitempty"`
}

func (x *FindMovieTorrentsRequest) Reset() {
	*x = FindMovieTorrentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMovieTorrentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMovieTorrentsRequest) ProtoMessage() {}

func (x *FindMovieTorrentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMovieTorrentsRequest.ProtoReflect.Descriptor instead.
func (*FindMovieTorrentsRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{7}
}

func (x *FindMovieTorrentsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FindMovieTorrentsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindMovieTorrentsRequest) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *FindMovieTorrentsRequest) GetUseWatchList() bool {
	if x != nil {
		return x.UseWatchList
	}
	return false
}

type FindTorrentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// что ищем
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// сколько максимум раздач
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// строгое соответствие поисковому запросу
	Strong bool `protobuf:"varint,3,opt,name=strong,proto3" json:"strong,omitempty"`
}

func (x *FindTorrentsRequest) Reset() {
	*x = FindTorrentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTorrentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTorrentsRequest) ProtoMessage() {}

func (x *FindTorrentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTorrentsRequest.ProtoReflect.Descriptor instead.
func (*FindTorrentsRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{8}
}

func (x *FindTorrentsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FindTorrentsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindTorrentsRequest) GetStrong() bool {
	if x != nil {
		return x.Strong
	}
	return false
}

type FindTorrentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// найденные раздачи
	Results []*Torrent `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FindTorrentsResponse) Reset() {
	*x = FindTorrentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTorrentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTorrentsResponse) ProtoMessage() {}

func (x *FindTorrentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTorrentsResponse.ProtoReflect.Descriptor instead.
func (*FindTorrentsResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{9}
}

func (x *FindTorrentsResponse) GetResults() []*Torrent {
	if x != nil {
		return x.Results
	}
	return nil
}

type DownloadTorrentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID раздачи
	TorrentId string `protobuf:"bytes,1,opt,name=torrentId,proto3" json:"torrentId,omitempty"`
}

func (x *DownloadTorrentRequest) Reset() {
	*x = DownloadTorrentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadTorrentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTorrentRequest) ProtoMessage() {}

func (x *DownloadTorrentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTorrentRequest.ProtoReflect.Descriptor instead.
func (*DownloadTorrentRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadTorrentRequest) GetTorrentId() string {
	if x != nil {
		return x.TorrentId
	}
	return ""
}

// инфа о новых сезонах одного сериала
type TvSeriesUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// сквозной ID фильма/сериала
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// общая информация о Movie
	Info *MovieInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// перечисление новых доступных сезонов
	SeasonsAvailable []uint32 `protobuf:"varint,3,rep,packed,name=seasonsAvailable,proto3" json:"seasonsAvailable,omitempty"`
}

func (x *TvSeriesUpdate) Reset() {
	*x = TvSeriesUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvSeriesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvSeriesUpdate) ProtoMessage() {}

func (x *TvSeriesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvSeriesUpdate.ProtoReflect.Descriptor instead.
func (*TvSeriesUpdate) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{11}
}

func (x *TvSeriesUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TvSeriesUpdate) GetInfo() *MovieInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *TvSeriesUpdate) GetSeasonsAvailable() []uint32 {
	if x != nil {
		return x.SeasonsAvailable
	}
	return nil
}

// результат запроса обновления сериалов
type GetTvSeriesUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*TvSeriesUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *GetTvSeriesUpdatesResponse) Reset() {
	*x = GetTvSeriesUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTvSeriesUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTvSeriesUpdatesResponse) ProtoMessage() {}

func (x *GetTvSeriesUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTvSeriesUpdatesResponse.ProtoReflect.Descriptor instead.
func (*GetTvSeriesUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{12}
}

func (x *GetTvSeriesUpdatesResponse) GetUpdates() []*TvSeriesUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// запрос доступных киношек в библиотеке
type GetMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// типы медиа которые стоит отобразить
	Type *MovieType `protobuf:"varint,1,opt,name=type,proto3,enum=MovieType,oneof" json:"type,omitempty"`
	// поиск по жанрам
	Genre *string `protobuf:"bytes,2,opt,name=genre,proto3,oneof" json:"genre,omitempty"`
}

func (x *GetMoviesRequest) Reset() {
	*x = GetMoviesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesRequest) ProtoMessage() {}

func (x *GetMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetMoviesRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{13}
}

func (x *GetMoviesRequest) GetType() MovieType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MovieType_TvSeries
}

func (x *GetMoviesRequest) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

type FilmLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TorrentID string   `protobuf:"bytes,1,opt,name=torrentID,proto3" json:"torrentID,omitempty"`
	Files     []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *FilmLayout) Reset() {
	*x = FilmLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmLayout) ProtoMessage() {}

func (x *FilmLayout) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmLayout.ProtoReflect.Descriptor instead.
func (*FilmLayout) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{14}
}

func (x *FilmLayout) GetTorrentID() string {
	if x != nil {
		return x.TorrentID
	}
	return ""
}

func (x *FilmLayout) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type TvSeriesLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seasons map[uint32]*TvSeriesLayout_Season `protobuf:"bytes,1,rep,name=seasons,proto3" json:"seasons,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TvSeriesLayout) Reset() {
	*x = TvSeriesLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvSeriesLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvSeriesLayout) ProtoMessage() {}

func (x *TvSeriesLayout) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvSeriesLayout.ProtoReflect.Descriptor instead.
func (*TvSeriesLayout) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{15}
}

func (x *TvSeriesLayout) GetSeasons() map[uint32]*TvSeriesLayout_Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

type Movie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID фильма или сериала
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// общая информация о Movie
	Info *MovieInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// набор файлов фильма
	Film *FilmLayout `protobuf:"bytes,3,opt,name=film,proto3,oneof" json:"film,omitempty"`
	// набор файлов сериала
	TvSeries *TvSeriesLayout `protobuf:"bytes,4,opt,name=tvSeries,proto3,oneof" json:"tvSeries,omitempty"`
	// Занимаемый на диске размер (МБ)
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Movie) Reset() {
	*x = Movie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{16}
}

func (x *Movie) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Movie) GetInfo() *MovieInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Movie) GetFilm() *FilmLayout {
	if x != nil {
		return x.Film
	}
	return nil
}

func (x *Movie) GetTvSeries() *TvSeriesLayout {
	if x != nil {
		return x.TvSeries
	}
	return nil
}

func (x *Movie) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Movie `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetMoviesResponse) Reset() {
	*x = GetMoviesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesResponse) ProtoMessage() {}

func (x *GetMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetMoviesResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{17}
}

func (x *GetMoviesResponse) GetResult() []*Movie {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetMovieRequest) Reset() {
	*x = GetMovieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieRequest) ProtoMessage() {}

func (x *GetMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieRequest.ProtoReflect.Descriptor instead.
func (*GetMovieRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{18}
}

func (x *GetMovieRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Movie `protobuf:"bytes,1,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *GetMovieResponse) Reset() {
	*x = GetMovieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieResponse) ProtoMessage() {}

func (x *GetMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieResponse.ProtoReflect.Descriptor instead.
func (*GetMovieResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{19}
}

func (x *GetMovieResponse) GetResult() *Movie {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type UploadMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID фильма или сериала
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// общая информация о Movie
	Info *MovieInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// номер сезона, если есть
	SeasonNo *uint32 `protobuf:"varint,3,opt,name=seasonNo,proto3,oneof" json:"seasonNo,omitempty"`
	// торрент-файл для загрузки
	TorrentFile []byte `protobuf:"bytes,4,opt,name=torrentFile,proto3" json:"torrentFile,omitempty"`
}

func (x *UploadMovieRequest) Reset() {
	*x = UploadMovieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMovieRequest) ProtoMessage() {}

func (x *UploadMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMovieRequest.ProtoReflect.Descriptor instead.
func (*UploadMovieRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{21}
}

func (x *UploadMovieRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadMovieRequest) GetInfo() *MovieInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UploadMovieRequest) GetSeasonNo() uint32 {
	if x != nil && x.SeasonNo != nil {
		return *x.SeasonNo
	}
	return 0
}

func (x *UploadMovieRequest) GetTorrentFile() []byte {
	if x != nil {
		return x.TorrentFile
	}
	return nil
}

type WatchLaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// идентификатор медиа
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WatchLaterRequest) Reset() {
	*x = WatchLaterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchLaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchLaterRequest) ProtoMessage() {}

func (x *WatchLaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchLaterRequest.ProtoReflect.Descriptor instead.
func (*WatchLaterRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{22}
}

func (x *WatchLaterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Poster string `protobuf:"bytes,3,opt,name=poster,proto3" json:"poster,omitempty"`
	Albums uint32 `protobuf:"varint,4,opt,name=albums,proto3" json:"albums,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{23}
}

func (x *Artist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Artist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artist) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *Artist) GetAlbums() uint32 {
	if x != nil {
		return x.Albums
	}
	return 0
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Artist      string   `protobuf:"bytes,3,opt,name=artist,proto3" json:"artist,omitempty"`
	Title       string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Poster      string   `protobuf:"bytes,5,opt,name=poster,proto3" json:"poster,omitempty"`
	ReleaseDate string   `protobuf:"bytes,6,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	Genres      []string `protobuf:"bytes,7,rep,name=genres,proto3" json:"genres,omitempty"`
	Tracks      uint32   `protobuf:"varint,8,opt,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{24}
}

func (x *Album) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Album) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Album) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Album) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Album) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *Album) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Album) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Album) GetTracks() uint32 {
	if x != nil {
		return x.Tracks
	}
	return 0
}

type SearchMusicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
	Albums  []*Album  `protobuf:"bytes,2,rep,name=albums,proto3" json:"albums,omitempty"`
}

func (x *SearchMusicResponse) Reset() {
	*x = SearchMusicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMusicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMusicResponse) ProtoMessage() {}

func (x *SearchMusicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMusicResponse.ProtoReflect.Descriptor instead.
func (*SearchMusicResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{25}
}

func (x *SearchMusicResponse) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *SearchMusicResponse) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

// скачать указанный фильм, или сезон сериала
type DownloadMusicAutoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// сквозной ID исполнителя или альбома
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// использовать сохраненный список просмотра для поиска раздачи (только для исполнителей)
	UseWatchList bool `protobuf:"varint,2,opt,name=useWatchList,proto3" json:"useWatchList,omitempty"`
}

func (x *DownloadMusicAutoRequest) Reset() {
	*x = DownloadMusicAutoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadMusicAutoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadMusicAutoRequest) ProtoMessage() {}

func (x *DownloadMusicAutoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadMusicAutoRequest.ProtoReflect.Descriptor instead.
func (*DownloadMusicAutoRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{26}
}

func (x *DownloadMusicAutoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DownloadMusicAutoRequest) GetUseWatchList() bool {
	if x != nil {
		return x.UseWatchList
	}
	return false
}

type DownloadMusicAutoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found bool `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
}

func (x *DownloadMusicAutoResponse) Reset() {
	*x = DownloadMusicAutoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadMusicAutoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadMusicAutoResponse) ProtoMessage() {}

func (x *DownloadMusicAutoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadMusicAutoResponse.ProtoReflect.Descriptor instead.
func (*DownloadMusicAutoResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{27}
}

func (x *DownloadMusicAutoResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type FindMusicTorrentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// сквозной ID исполнителя/альбома
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// максимальное кол-во раздач в ответе
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// использовать сохраненный список просмотра для поиска раздачи
	UseWatchList bool `protobuf:"varint,3,opt,name=useWatchList,proto3" json:"useWatchList,omitempty"`
}

func (x *FindMusicTorrentsRequest) Reset() {
	*x = FindMusicTorrentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMusicTorrentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMusicTorrentsRequest) ProtoMessage() {}

func (x *FindMusicTorrentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMusicTorrentsRequest.ProtoReflect.Descriptor instead.
func (*FindMusicTorrentsRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{28}
}

func (x *FindMusicTorrentsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FindMusicTorrentsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindMusicTorrentsRequest) GetUseWatchList() bool {
	if x != nil {
		return x.UseWatchList
	}
	return false
}

type UploadMusicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID исполнителя или альбома
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// торрент-файл для загрузки
	TorrentFile []byte `protobuf:"bytes,2,opt,name=torrentFile,proto3" json:"torrentFile,omitempty"`
}

func (x *UploadMusicRequest) Reset() {
	*x = UploadMusicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMusicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMusicRequest) ProtoMessage() {}

func (x *UploadMusicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMusicRequest.ProtoReflect.Descriptor instead.
func (*UploadMusicRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{29}
}

func (x *UploadMusicRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadMusicRequest) GetTorrentFile() []byte {
	if x != nil {
		return x.TorrentFile
	}
	return nil
}

type ListArtistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ListArtistsResponse) Reset() {
	*x = ListArtistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtistsResponse) ProtoMessage() {}

func (x *ListArtistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtistsResponse.ProtoReflect.Descriptor instead.
func (*ListArtistsResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{30}
}

func (x *ListArtistsResponse) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type GetAlbumsUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*Album `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *GetAlbumsUpdatesResponse) Reset() {
	*x = GetAlbumsUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumsUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumsUpdatesResponse) ProtoMessage() {}

func (x *GetAlbumsUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumsUpdatesResponse.ProtoReflect.Descriptor instead.
func (*GetAlbumsUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{31}
}

func (x *GetAlbumsUpdatesResponse) GetUpdates() []*Album {
	if x != nil {
		return x.Updates
	}
	return nil
}

type ListenLaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID альбома или исполнителя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListenLaterRequest) Reset() {
	*x = ListenLaterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenLaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenLaterRequest) ProtoMessage() {}

func (x *ListenLaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenLaterRequest.ProtoReflect.Descriptor instead.
func (*ListenLaterRequest) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{32}
}

func (x *ListenLaterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetListenListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *GetListenListResponse) Reset() {
	*x = GetListenListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListenListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListenListResponse) ProtoMessage() {}

func (x *GetListenListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListenListResponse.ProtoReflect.Descriptor instead.
func (*GetListenListResponse) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{33}
}

func (x *GetListenListResponse) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type TvSeriesLayout_Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *TvSeriesLayout_Season) Reset() {
	*x = TvSeriesLayout_Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_library_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvSeriesLayout_Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvSeriesLayout_Season) ProtoMessage() {}

func (x *TvSeriesLayout_Season) ProtoReflect() protoreflect.Message {
	mi := &file_rms_library_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvSeriesLayout_Season.ProtoReflect.Descriptor instead.
func (*TvSeriesLayout_Season) Descriptor() ([]byte, []int) {
	return file_rms_library_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TvSeriesLayout_Season) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_rms_library_proto protoreflect.FileDescriptor

var file_rms_library_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x6d, 0x73, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x39, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x09,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x6a,
	0x0a, 0x0a, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x13, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x06,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x07, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x65, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65,
	0x65, 0x64, 0x65, 0x72, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x22, 0x3a, 0x0a,
	0x14, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x16, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x6c, 0x0a, 0x0e, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x47, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x22,
	0x40, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x1a, 0x1e, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0c,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb9, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x08, 0x74, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x48, 0x01, 0x52, 0x08, 0x74, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x69, 0x6c, 0x6d, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f,
	0x22, 0x23, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x58, 0x0a, 0x13, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x73, 0x22, 0x4e, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x64, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x12,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3c,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x3a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x2a, 0x2d,
	0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x6d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x6c, 0x69, 0x70, 0x10, 0x02, 0x32, 0xfe, 0x04,
	0x0a, 0x06, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x0e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x19, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x54, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35,
	0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x13, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x76, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe0,
	0x04, 0x0a, 0x05, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x0e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x19, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x54, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35,
	0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x13, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x61, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xc2, 0x02, 0x0a, 0x08, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x53, 0x61, 0x76, 0x65,
	0x12, 0x17, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x72, 0x6d, 0x73,
	0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rms_library_proto_rawDescOnce sync.Once
	file_rms_library_proto_rawDescData = file_rms_library_proto_rawDesc
)

func file_rms_library_proto_rawDescGZIP() []byte {
	file_rms_library_proto_rawDescOnce.Do(func() {
		file_rms_library_proto_rawDescData = protoimpl.X.CompressGZIP(file_rms_library_proto_rawDescData)
	})
	return file_rms_library_proto_rawDescData
}

var file_rms_library_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rms_library_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_rms_library_proto_goTypes = []interface{}{
	(MovieType)(0),                     // 0: MovieType
	(*SearchRequest)(nil),              // 1: SearchRequest
	(*MovieInfo)(nil),                  // 2: MovieInfo
	(*FoundMovie)(nil),                 // 3: FoundMovie
	(*SearchMovieResponse)(nil),        // 4: SearchMovieResponse
	(*Torrent)(nil),                    // 5: Torrent
	(*DownloadMovieAutoRequest)(nil),   // 6: DownloadMovieAutoRequest
	(*DownloadMovieAutoResponse)(nil),  // 7: DownloadMovieAutoResponse
	(*FindMovieTorrentsRequest)(nil),   // 8: FindMovieTorrentsRequest
	(*FindTorrentsRequest)(nil),        // 9: FindTorrentsRequest
	(*FindTorrentsResponse)(nil),       // 10: FindTorrentsResponse
	(*DownloadTorrentRequest)(nil),     // 11: DownloadTorrentRequest
	(*TvSeriesUpdate)(nil),             // 12: TvSeriesUpdate
	(*GetTvSeriesUpdatesResponse)(nil), // 13: GetTvSeriesUpdatesResponse
	(*GetMoviesRequest)(nil),           // 14: GetMoviesRequest
	(*FilmLayout)(nil),                 // 15: FilmLayout
	(*TvSeriesLayout)(nil),             // 16: TvSeriesLayout
	(*Movie)(nil),                      // 17: Movie
	(*GetMoviesResponse)(nil),          // 18: GetMoviesResponse
	(*GetMovieRequest)(nil),            // 19: GetMovieRequest
	(*GetMovieResponse)(nil),           // 20: GetMovieResponse
	(*DeleteRequest)(nil),              // 21: DeleteRequest
	(*UploadMovieRequest)(nil),         // 22: UploadMovieRequest
	(*WatchLaterRequest)(nil),          // 23: WatchLaterRequest
	(*Artist)(nil),                     // 24: Artist
	(*Album)(nil),                      // 25: Album
	(*SearchMusicResponse)(nil),        // 26: SearchMusicResponse
	(*DownloadMusicAutoRequest)(nil),   // 27: DownloadMusicAutoRequest
	(*DownloadMusicAutoResponse)(nil),  // 28: DownloadMusicAutoResponse
	(*FindMusicTorrentsRequest)(nil),   // 29: FindMusicTorrentsRequest
	(*UploadMusicRequest)(nil),         // 30: UploadMusicRequest
	(*ListArtistsResponse)(nil),        // 31: ListArtistsResponse
	(*GetAlbumsUpdatesResponse)(nil),   // 32: GetAlbumsUpdatesResponse
	(*ListenLaterRequest)(nil),         // 33: ListenLaterRequest
	(*GetListenListResponse)(nil),      // 34: GetListenListResponse
	(*TvSeriesLayout_Season)(nil),      // 35: TvSeriesLayout.Season
	nil,                                // 36: TvSeriesLayout.SeasonsEntry
	(*emptypb.Empty)(nil),              // 37: google.protobuf.Empty
}
var file_rms_library_proto_depIdxs = []int32{
	0,  // 0: MovieInfo.type:type_name -> MovieType
	2,  // 1: FoundMovie.info:type_name -> MovieInfo
	3,  // 2: SearchMovieResponse.movies:type_name -> FoundMovie
	5,  // 3: FindTorrentsResponse.results:type_name -> Torrent
	2,  // 4: TvSeriesUpdate.info:type_name -> MovieInfo
	12, // 5: GetTvSeriesUpdatesResponse.updates:type_name -> TvSeriesUpdate
	0,  // 6: GetMoviesRequest.type:type_name -> MovieType
	36, // 7: TvSeriesLayout.seasons:type_name -> TvSeriesLayout.SeasonsEntry
	2,  // 8: Movie.info:type_name -> MovieInfo
	15, // 9: Movie.film:type_name -> FilmLayout
	16, // 10: Movie.tvSeries:type_name -> TvSeriesLayout
	17, // 11: GetMoviesResponse.result:type_name -> Movie
	17, // 12: GetMovieResponse.result:type_name -> Movie
	2,  // 13: UploadMovieRequest.info:type_name -> MovieInfo
	24, // 14: SearchMusicResponse.artists:type_name -> Artist
	25, // 15: SearchMusicResponse.albums:type_name -> Album
	24, // 16: ListArtistsResponse.artists:type_name -> Artist
	25, // 17: GetAlbumsUpdatesResponse.updates:type_name -> Album
	24, // 18: GetListenListResponse.artists:type_name -> Artist
	35, // 19: TvSeriesLayout.SeasonsEntry.value:type_name -> TvSeriesLayout.Season
	1,  // 20: Movies.Search:input_type -> SearchRequest
	6,  // 21: Movies.DownloadAuto:input_type -> DownloadMovieAutoRequest
	8,  // 22: Movies.FindTorrents:input_type -> FindMovieTorrentsRequest
	11, // 23: Movies.Download:input_type -> DownloadTorrentRequest
	22, // 24: Movies.Upload:input_type -> UploadMovieRequest
	14, // 25: Movies.List:input_type -> GetMoviesRequest
	19, // 26: Movies.Get:input_type -> GetMovieRequest
	21, // 27: Movies.Delete:input_type -> DeleteRequest
	37, // 28: Movies.GetTvSeriesUpdates:input_type -> google.protobuf.Empty
	23, // 29: Movies.WatchLater:input_type -> WatchLaterRequest
	14, // 30: Movies.GetWatchList:input_type -> GetMoviesRequest
	1,  // 31: Music.Search:input_type -> SearchRequest
	27, // 32: Music.DownloadAuto:input_type -> DownloadMusicAutoRequest
	29, // 33: Music.FindTorrents:input_type -> FindMusicTorrentsRequest
	11, // 34: Music.Download:input_type -> DownloadTorrentRequest
	30, // 35: Music.Upload:input_type -> UploadMusicRequest
	37, // 36: Music.List:input_type -> google.protobuf.Empty
	21, // 37: Music.Delete:input_type -> DeleteRequest
	37, // 38: Music.GetAlbumsUpdates:input_type -> google.protobuf.Empty
	33, // 39: Music.ListenLater:input_type -> ListenLaterRequest
	37, // 40: Music.GetListenList:input_type -> google.protobuf.Empty
	9,  // 41: Torrents.FindTorrents:input_type -> FindTorrentsRequest
	11, // 42: Torrents.Download:input_type -> DownloadTorrentRequest
	11, // 43: Torrents.Save:input_type -> DownloadTorrentRequest
	37, // 44: Torrents.GetSavedList:input_type -> google.protobuf.Empty
	11, // 45: Torrents.DownloadSavedItem:input_type -> DownloadTorrentRequest
	4,  // 46: Movies.Search:output_type -> SearchMovieResponse
	7,  // 47: Movies.DownloadAuto:output_type -> DownloadMovieAutoResponse
	10, // 48: Movies.FindTorrents:output_type -> FindTorrentsResponse
	37, // 49: Movies.Download:output_type -> google.protobuf.Empty
	37, // 50: Movies.Upload:output_type -> google.protobuf.Empty
	18, // 51: Movies.List:output_type -> GetMoviesResponse
	20, // 52: Movies.Get:output_type -> GetMovieResponse
	37, // 53: Movies.Delete:output_type -> google.protobuf.Empty
	13, // 54: Movies.GetTvSeriesUpdates:output_type -> GetTvSeriesUpdatesResponse
	37, // 55: Movies.WatchLater:output_type -> google.protobuf.Empty
	18, // 56: Movies.GetWatchList:output_type -> GetMoviesResponse
	26, // 57: Music.Search:output_type -> SearchMusicResponse
	28, // 58: Music.DownloadAuto:output_type -> DownloadMusicAutoResponse
	10, // 59: Music.FindTorrents:output_type -> FindTorrentsResponse
	37, // 60: Music.Download:output_type -> google.protobuf.Empty
	37, // 61: Music.Upload:output_type -> google.protobuf.Empty
	31, // 62: Music.List:output_type -> ListArtistsResponse
	37, // 63: Music.Delete:output_type -> google.protobuf.Empty
	32, // 64: Music.GetAlbumsUpdates:output_type -> GetAlbumsUpdatesResponse
	37, // 65: Music.ListenLater:output_type -> google.protobuf.Empty
	34, // 66: Music.GetListenList:output_type -> GetListenListResponse
	10, // 67: Torrents.FindTorrents:output_type -> FindTorrentsResponse
	37, // 68: Torrents.Download:output_type -> google.protobuf.Empty
	37, // 69: Torrents.Save:output_type -> google.protobuf.Empty
	10, // 70: Torrents.GetSavedList:output_type -> FindTorrentsResponse
	37, // 71: Torrents.DownloadSavedItem:output_type -> google.protobuf.Empty
	46, // [46:72] is the sub-list for method output_type
	20, // [20:46] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_rms_library_proto_init() }
func file_rms_library_proto_init() {
	if File_rms_library_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rms_library_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoundMovie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMovieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Torrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadMovieAutoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadMovieAutoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMovieTorrentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTorrentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTorrentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadTorrentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvSeriesUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTvSeriesUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvSeriesLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Movie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoviesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMovieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMovieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMovieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLaterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMusicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadMusicAutoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadMusicAutoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMusicTorrentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMusicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumsUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenLaterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListenListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_library_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvSeriesLayout_Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rms_library_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rms_library_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_rms_library_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_rms_library_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_rms_library_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_rms_library_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_rms_library_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rms_library_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_rms_library_proto_goTypes,
		DependencyIndexes: file_rms_library_proto_depIdxs,
		EnumInfos:         file_rms_library_proto_enumTypes,
		MessageInfos:      file_rms_library_proto_msgTypes,
	}.Build()
	File_rms_library_proto = out.File
	file_rms_library_proto_rawDesc = nil
	file_rms_library_proto_goTypes = nil
	file_rms_library_proto_depIdxs = nil
}
