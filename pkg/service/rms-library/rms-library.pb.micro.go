// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-library.proto

package rms_library

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RmsLibrary service

func NewRmsLibraryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RmsLibrary service

type RmsLibraryService interface {
	// поиск информации о фильмах и сериалах во внешних источниках
	SearchMovie(ctx context.Context, in *SearchMovieRequest, opts ...client.CallOption) (*SearchMovieResponse, error)
	// скачать указанный фильм или сериал в автоматическом режиме
	DownloadMovieAuto(ctx context.Context, in *DownloadMovieAutoRequest, opts ...client.CallOption) (*DownloadMovieAutoResponse, error)
	// найти варианты раздачи для фильма или сериала
	FindMovieTorrents(ctx context.Context, in *FindMovieTorrentsRequest, opts ...client.CallOption) (*FindTorrentsResponse, error)
	// найти на торрентах просто какой то контент без привзяки к типу
	FindTorrents(ctx context.Context, in *FindTorrentsRequest, opts ...client.CallOption) (*FindTorrentsResponse, error)
	// скачать выбранную раздачу
	DownloadTorrent(ctx context.Context, in *DownloadTorrentRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// получить список доступных новых сезонов для скачивания
	GetTvSeriesUpdates(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetTvSeriesUpdatesResponse, error)
	// получить список фильмов/сериалов и пути к их контенту
	GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...client.CallOption) (*GetMoviesResponse, error)
}

type rmsLibraryService struct {
	c    client.Client
	name string
}

func NewRmsLibraryService(name string, c client.Client) RmsLibraryService {
	return &rmsLibraryService{
		c:    c,
		name: name,
	}
}

func (c *rmsLibraryService) SearchMovie(ctx context.Context, in *SearchMovieRequest, opts ...client.CallOption) (*SearchMovieResponse, error) {
	req := c.c.NewRequest(c.name, "RmsLibrary.SearchMovie", in)
	out := new(SearchMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsLibraryService) DownloadMovieAuto(ctx context.Context, in *DownloadMovieAutoRequest, opts ...client.CallOption) (*DownloadMovieAutoResponse, error) {
	req := c.c.NewRequest(c.name, "RmsLibrary.DownloadMovieAuto", in)
	out := new(DownloadMovieAutoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsLibraryService) FindMovieTorrents(ctx context.Context, in *FindMovieTorrentsRequest, opts ...client.CallOption) (*FindTorrentsResponse, error) {
	req := c.c.NewRequest(c.name, "RmsLibrary.FindMovieTorrents", in)
	out := new(FindTorrentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsLibraryService) FindTorrents(ctx context.Context, in *FindTorrentsRequest, opts ...client.CallOption) (*FindTorrentsResponse, error) {
	req := c.c.NewRequest(c.name, "RmsLibrary.FindTorrents", in)
	out := new(FindTorrentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsLibraryService) DownloadTorrent(ctx context.Context, in *DownloadTorrentRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsLibrary.DownloadTorrent", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsLibraryService) GetTvSeriesUpdates(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetTvSeriesUpdatesResponse, error) {
	req := c.c.NewRequest(c.name, "RmsLibrary.GetTvSeriesUpdates", in)
	out := new(GetTvSeriesUpdatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsLibraryService) GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...client.CallOption) (*GetMoviesResponse, error) {
	req := c.c.NewRequest(c.name, "RmsLibrary.GetMovies", in)
	out := new(GetMoviesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RmsLibrary service

type RmsLibraryHandler interface {
	// поиск информации о фильмах и сериалах во внешних источниках
	SearchMovie(context.Context, *SearchMovieRequest, *SearchMovieResponse) error
	// скачать указанный фильм или сериал в автоматическом режиме
	DownloadMovieAuto(context.Context, *DownloadMovieAutoRequest, *DownloadMovieAutoResponse) error
	// найти варианты раздачи для фильма или сериала
	FindMovieTorrents(context.Context, *FindMovieTorrentsRequest, *FindTorrentsResponse) error
	// найти на торрентах просто какой то контент без привзяки к типу
	FindTorrents(context.Context, *FindTorrentsRequest, *FindTorrentsResponse) error
	// скачать выбранную раздачу
	DownloadTorrent(context.Context, *DownloadTorrentRequest, *emptypb.Empty) error
	// получить список доступных новых сезонов для скачивания
	GetTvSeriesUpdates(context.Context, *emptypb.Empty, *GetTvSeriesUpdatesResponse) error
	// получить список фильмов/сериалов и пути к их контенту
	GetMovies(context.Context, *GetMoviesRequest, *GetMoviesResponse) error
}

func RegisterRmsLibraryHandler(s server.Server, hdlr RmsLibraryHandler, opts ...server.HandlerOption) error {
	type rmsLibrary interface {
		SearchMovie(ctx context.Context, in *SearchMovieRequest, out *SearchMovieResponse) error
		DownloadMovieAuto(ctx context.Context, in *DownloadMovieAutoRequest, out *DownloadMovieAutoResponse) error
		FindMovieTorrents(ctx context.Context, in *FindMovieTorrentsRequest, out *FindTorrentsResponse) error
		FindTorrents(ctx context.Context, in *FindTorrentsRequest, out *FindTorrentsResponse) error
		DownloadTorrent(ctx context.Context, in *DownloadTorrentRequest, out *emptypb.Empty) error
		GetTvSeriesUpdates(ctx context.Context, in *emptypb.Empty, out *GetTvSeriesUpdatesResponse) error
		GetMovies(ctx context.Context, in *GetMoviesRequest, out *GetMoviesResponse) error
	}
	type RmsLibrary struct {
		rmsLibrary
	}
	h := &rmsLibraryHandler{hdlr}
	return s.Handle(s.NewHandler(&RmsLibrary{h}, opts...))
}

type rmsLibraryHandler struct {
	RmsLibraryHandler
}

func (h *rmsLibraryHandler) SearchMovie(ctx context.Context, in *SearchMovieRequest, out *SearchMovieResponse) error {
	return h.RmsLibraryHandler.SearchMovie(ctx, in, out)
}

func (h *rmsLibraryHandler) DownloadMovieAuto(ctx context.Context, in *DownloadMovieAutoRequest, out *DownloadMovieAutoResponse) error {
	return h.RmsLibraryHandler.DownloadMovieAuto(ctx, in, out)
}

func (h *rmsLibraryHandler) FindMovieTorrents(ctx context.Context, in *FindMovieTorrentsRequest, out *FindTorrentsResponse) error {
	return h.RmsLibraryHandler.FindMovieTorrents(ctx, in, out)
}

func (h *rmsLibraryHandler) FindTorrents(ctx context.Context, in *FindTorrentsRequest, out *FindTorrentsResponse) error {
	return h.RmsLibraryHandler.FindTorrents(ctx, in, out)
}

func (h *rmsLibraryHandler) DownloadTorrent(ctx context.Context, in *DownloadTorrentRequest, out *emptypb.Empty) error {
	return h.RmsLibraryHandler.DownloadTorrent(ctx, in, out)
}

func (h *rmsLibraryHandler) GetTvSeriesUpdates(ctx context.Context, in *emptypb.Empty, out *GetTvSeriesUpdatesResponse) error {
	return h.RmsLibraryHandler.GetTvSeriesUpdates(ctx, in, out)
}

func (h *rmsLibraryHandler) GetMovies(ctx context.Context, in *GetMoviesRequest, out *GetMoviesResponse) error {
	return h.RmsLibraryHandler.GetMovies(ctx, in, out)
}
