// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.1
// source: rms-cctv.proto

package rms_cctv

import (
	media "github.com/RacoonMediaServer/rms-packages/pkg/media"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Режим записи камеры в архив
type RecordingMode int32

const (
	// Не писать
	RecordingMode_Never RecordingMode = 0
	// Всегда писать
	RecordingMode_Always RecordingMode = 1
	// Пишем, только если сработало событие
	RecordingMode_ByEvents RecordingMode = 2
	// Пишем с прореживанием, когда сработало событие - все кадры
	RecordingMode_Optimal RecordingMode = 3
	// Пишем в соответсвии с расписанием
	RecordingMode_BySchedule RecordingMode = 4
)

// Enum value maps for RecordingMode.
var (
	RecordingMode_name = map[int32]string{
		0: "Never",
		1: "Always",
		2: "ByEvents",
		3: "Optimal",
		4: "BySchedule",
	}
	RecordingMode_value = map[string]int32{
		"Never":      0,
		"Always":     1,
		"ByEvents":   2,
		"Optimal":    3,
		"BySchedule": 4,
	}
)

func (x RecordingMode) Enum() *RecordingMode {
	p := new(RecordingMode)
	*p = x
	return p
}

func (x RecordingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rms_cctv_proto_enumTypes[0].Descriptor()
}

func (RecordingMode) Type() protoreflect.EnumType {
	return &file_rms_cctv_proto_enumTypes[0]
}

func (x RecordingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingMode.Descriptor instead.
func (RecordingMode) EnumDescriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{0}
}

type CctvSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventNotifyThresholdIntervalSec uint32 `protobuf:"varint,1,opt,name=EventNotifyThresholdIntervalSec,proto3" json:"EventNotifyThresholdIntervalSec,omitempty"`
	OneEventDefaultDurationSec      uint32 `protobuf:"varint,2,opt,name=OneEventDefaultDurationSec,proto3" json:"OneEventDefaultDurationSec,omitempty"`
}

func (x *CctvSettings) Reset() {
	*x = CctvSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CctvSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CctvSettings) ProtoMessage() {}

func (x *CctvSettings) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CctvSettings.ProtoReflect.Descriptor instead.
func (*CctvSettings) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{0}
}

func (x *CctvSettings) GetEventNotifyThresholdIntervalSec() uint32 {
	if x != nil {
		return x.EventNotifyThresholdIntervalSec
	}
	return 0
}

func (x *CctvSettings) GetOneEventDefaultDurationSec() uint32 {
	if x != nil {
		return x.OneEventDefaultDurationSec
	}
	return 0
}

type Camera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Внутренний идентификатор камеры
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Видимое имя камеры
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// URL для доступа к камере (HTTP)
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Имя пользователя
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Пароль
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Сколько дней хранить архив
	KeepDays uint32 `protobuf:"varint,6,opt,name=keepDays,proto3" json:"keepDays,omitempty"`
	// Режим записи
	Mode RecordingMode `protobuf:"varint,7,opt,name=mode,proto3,enum=RecordingMode" json:"mode,omitempty"`
	// Расписание уведомлений (идентификатор)
	Schedule string `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *Camera) Reset() {
	*x = Camera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera) ProtoMessage() {}

func (x *Camera) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera.ProtoReflect.Descriptor instead.
func (*Camera) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{1}
}

func (x *Camera) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Camera) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Camera) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Camera) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Camera) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Camera) GetKeepDays() uint32 {
	if x != nil {
		return x.KeepDays
	}
	return 0
}

func (x *Camera) GetMode() RecordingMode {
	if x != nil {
		return x.Mode
	}
	return RecordingMode_Never
}

func (x *Camera) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type GetCamerasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список камер
	Cameras []*Camera `protobuf:"bytes,1,rep,name=cameras,proto3" json:"cameras,omitempty"`
}

func (x *GetCamerasResponse) Reset() {
	*x = GetCamerasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCamerasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCamerasResponse) ProtoMessage() {}

func (x *GetCamerasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCamerasResponse.ProtoReflect.Descriptor instead.
func (*GetCamerasResponse) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{2}
}

func (x *GetCamerasResponse) GetCameras() []*Camera {
	if x != nil {
		return x.Cameras
	}
	return nil
}

type AddCameraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID камеры
	CameraId uint32 `protobuf:"varint,1,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
}

func (x *AddCameraResponse) Reset() {
	*x = AddCameraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCameraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCameraResponse) ProtoMessage() {}

func (x *AddCameraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCameraResponse.ProtoReflect.Descriptor instead.
func (*AddCameraResponse) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{3}
}

func (x *AddCameraResponse) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

type DeleteCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID камеры
	CameraId uint32 `protobuf:"varint,1,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
}

func (x *DeleteCameraRequest) Reset() {
	*x = DeleteCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCameraRequest) ProtoMessage() {}

func (x *DeleteCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCameraRequest.ProtoReflect.Descriptor instead.
func (*DeleteCameraRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCameraRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

type GetLiveUriRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID камеры
	CameraId uint32 `protobuf:"varint,1,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
	// Протокол для формирования ссылки
	Transport media.Transport `protobuf:"varint,2,opt,name=transport,proto3,enum=media.Transport" json:"transport,omitempty"`
	// Брать ли поток с наилучшим качеством
	MainProfile bool `protobuf:"varint,3,opt,name=mainProfile,proto3" json:"mainProfile,omitempty"`
}

func (x *GetLiveUriRequest) Reset() {
	*x = GetLiveUriRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveUriRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveUriRequest) ProtoMessage() {}

func (x *GetLiveUriRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveUriRequest.ProtoReflect.Descriptor instead.
func (*GetLiveUriRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{5}
}

func (x *GetLiveUriRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *GetLiveUriRequest) GetTransport() media.Transport {
	if x != nil {
		return x.Transport
	}
	return media.Transport(0)
}

func (x *GetLiveUriRequest) GetMainProfile() bool {
	if x != nil {
		return x.MainProfile
	}
	return false
}

type GetUriResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI для воспроизведения
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GetUriResponse) Reset() {
	*x = GetUriResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUriResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUriResponse) ProtoMessage() {}

func (x *GetUriResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUriResponse.ProtoReflect.Descriptor instead.
func (*GetUriResponse) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{6}
}

func (x *GetUriResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type GetReplayUriRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID камеры
	CameraId uint32 `protobuf:"varint,1,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
	// Протокол для формирования ссылки
	Transport media.Transport `protobuf:"varint,2,opt,name=transport,proto3,enum=media.Transport" json:"transport,omitempty"`
	// С какого момента начать показывать запись
	Timestamp *uint64 `protobuf:"varint,3,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (x *GetReplayUriRequest) Reset() {
	*x = GetReplayUriRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplayUriRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplayUriRequest) ProtoMessage() {}

func (x *GetReplayUriRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplayUriRequest.ProtoReflect.Descriptor instead.
func (*GetReplayUriRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{7}
}

func (x *GetReplayUriRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

func (x *GetReplayUriRequest) GetTransport() media.Transport {
	if x != nil {
		return x.Transport
	}
	return media.Transport(0)
}

func (x *GetReplayUriRequest) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type GetReplayUriResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI для воспроизведения
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Смещение от начала фрагмента на запрошенное время
	OffsetSec uint32 `protobuf:"varint,2,opt,name=offsetSec,proto3" json:"offsetSec,omitempty"`
}

func (x *GetReplayUriResponse) Reset() {
	*x = GetReplayUriResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplayUriResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplayUriResponse) ProtoMessage() {}

func (x *GetReplayUriResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplayUriResponse.ProtoReflect.Descriptor instead.
func (*GetReplayUriResponse) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{8}
}

func (x *GetReplayUriResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GetReplayUriResponse) GetOffsetSec() uint32 {
	if x != nil {
		return x.OffsetSec
	}
	return 0
}

type GetSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID камеры
	CameraId uint32 `protobuf:"varint,1,opt,name=cameraId,proto3" json:"cameraId,omitempty"`
}

func (x *GetSnapshotRequest) Reset() {
	*x = GetSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSnapshotRequest) ProtoMessage() {}

func (x *GetSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{9}
}

func (x *GetSnapshotRequest) GetCameraId() uint32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

type GetSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JPEG-изображение
	Snapshot []byte `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetSnapshotResponse) Reset() {
	*x = GetSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSnapshotResponse) ProtoMessage() {}

func (x *GetSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSnapshotResponse.ProtoReflect.Descriptor instead.
func (*GetSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{10}
}

func (x *GetSnapshotResponse) GetSnapshot() []byte {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ModifyCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Внутренний идентификатор камеры
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Имя камеры
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Сколько дней хранить архив
	KeepDays uint32 `protobuf:"varint,3,opt,name=keepDays,proto3" json:"keepDays,omitempty"`
	// Режим записи
	Mode RecordingMode `protobuf:"varint,4,opt,name=mode,proto3,enum=RecordingMode" json:"mode,omitempty"`
	// Расписание уведомлений (идентификатор)
	Schedule string `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ModifyCameraRequest) Reset() {
	*x = ModifyCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCameraRequest) ProtoMessage() {}

func (x *ModifyCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCameraRequest.ProtoReflect.Descriptor instead.
func (*ModifyCameraRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyCameraRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyCameraRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyCameraRequest) GetKeepDays() uint32 {
	if x != nil {
		return x.KeepDays
	}
	return 0
}

func (x *ModifyCameraRequest) GetMode() RecordingMode {
	if x != nil {
		return x.Mode
	}
	return RecordingMode_Never
}

func (x *ModifyCameraRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type SetNobodyAtHomeModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Активен ли режим
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *SetNobodyAtHomeModeRequest) Reset() {
	*x = SetNobodyAtHomeModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNobodyAtHomeModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNobodyAtHomeModeRequest) ProtoMessage() {}

func (x *SetNobodyAtHomeModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNobodyAtHomeModeRequest.ProtoReflect.Descriptor instead.
func (*SetNobodyAtHomeModeRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{12}
}

func (x *SetNobodyAtHomeModeRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор расписания
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Человеко-читаемое название
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Итервалы расписания в формате JSON
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{13}
}

func (x *Schedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Schedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schedule) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type AddScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор расписания
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddScheduleResponse) Reset() {
	*x = AddScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScheduleResponse) ProtoMessage() {}

func (x *AddScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScheduleResponse.ProtoReflect.Descriptor instead.
func (*AddScheduleResponse) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{14}
}

func (x *AddScheduleResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetScheduleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Schedule `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetScheduleListResponse) Reset() {
	*x = GetScheduleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleListResponse) ProtoMessage() {}

func (x *GetScheduleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleListResponse.ProtoReflect.Descriptor instead.
func (*GetScheduleListResponse) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{15}
}

func (x *GetScheduleListResponse) GetResult() []*Schedule {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор расписания
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetScheduleRequest) Reset() {
	*x = GetScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleRequest) ProtoMessage() {}

func (x *GetScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetScheduleRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{16}
}

func (x *GetScheduleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор расписания
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteScheduleRequest) Reset() {
	*x = DeleteScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rms_cctv_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheduleRequest) ProtoMessage() {}

func (x *DeleteScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rms_cctv_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheduleRequest.ProtoReflect.Descriptor instead.
func (*DeleteScheduleRequest) Descriptor() ([]byte, []int) {
	return file_rms_cctv_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteScheduleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_rms_cctv_proto protoreflect.FileDescriptor

var file_rms_cctv_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x6d, 0x73, 0x2d, 0x63, 0x63, 0x74, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x43,
	0x63, 0x74, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x1a, 0x4f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x4f, 0x6e, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x22, 0xca, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x61,
	0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x22, 0x37, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x07, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x22, 0x2f, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22,
	0x81, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x46, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x22, 0x30, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x61, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x74,
	0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x48, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x25, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x04, 0x32, 0x76, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x43, 0x63,
	0x74, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x53, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0d, 0x2e, 0x43, 0x63, 0x74, 0x76,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0xe0, 0x03, 0x0a, 0x07, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x12, 0x07, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x1a, 0x12, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x12, 0x14, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12,
	0x14, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x12, 0x12, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x72, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x69,
	0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x55, 0x72, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x13, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x62, 0x6f, 0x64, 0x79, 0x41, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x74, 0x48, 0x6f, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0xa7, 0x02, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x1a, 0x14, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x0d, 0x5a,
	0x0b, 0x2e, 0x2e, 0x2f, 0x72, 0x6d, 0x73, 0x2d, 0x63, 0x63, 0x74, 0x76, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rms_cctv_proto_rawDescOnce sync.Once
	file_rms_cctv_proto_rawDescData = file_rms_cctv_proto_rawDesc
)

func file_rms_cctv_proto_rawDescGZIP() []byte {
	file_rms_cctv_proto_rawDescOnce.Do(func() {
		file_rms_cctv_proto_rawDescData = protoimpl.X.CompressGZIP(file_rms_cctv_proto_rawDescData)
	})
	return file_rms_cctv_proto_rawDescData
}

var file_rms_cctv_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rms_cctv_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_rms_cctv_proto_goTypes = []interface{}{
	(RecordingMode)(0),                 // 0: RecordingMode
	(*CctvSettings)(nil),               // 1: CctvSettings
	(*Camera)(nil),                     // 2: Camera
	(*GetCamerasResponse)(nil),         // 3: GetCamerasResponse
	(*AddCameraResponse)(nil),          // 4: AddCameraResponse
	(*DeleteCameraRequest)(nil),        // 5: DeleteCameraRequest
	(*GetLiveUriRequest)(nil),          // 6: GetLiveUriRequest
	(*GetUriResponse)(nil),             // 7: GetUriResponse
	(*GetReplayUriRequest)(nil),        // 8: GetReplayUriRequest
	(*GetReplayUriResponse)(nil),       // 9: GetReplayUriResponse
	(*GetSnapshotRequest)(nil),         // 10: GetSnapshotRequest
	(*GetSnapshotResponse)(nil),        // 11: GetSnapshotResponse
	(*ModifyCameraRequest)(nil),        // 12: ModifyCameraRequest
	(*SetNobodyAtHomeModeRequest)(nil), // 13: SetNobodyAtHomeModeRequest
	(*Schedule)(nil),                   // 14: Schedule
	(*AddScheduleResponse)(nil),        // 15: AddScheduleResponse
	(*GetScheduleListResponse)(nil),    // 16: GetScheduleListResponse
	(*GetScheduleRequest)(nil),         // 17: GetScheduleRequest
	(*DeleteScheduleRequest)(nil),      // 18: DeleteScheduleRequest
	(media.Transport)(0),               // 19: media.Transport
	(*emptypb.Empty)(nil),              // 20: google.protobuf.Empty
}
var file_rms_cctv_proto_depIdxs = []int32{
	0,  // 0: Camera.mode:type_name -> RecordingMode
	2,  // 1: GetCamerasResponse.cameras:type_name -> Camera
	19, // 2: GetLiveUriRequest.transport:type_name -> media.Transport
	19, // 3: GetReplayUriRequest.transport:type_name -> media.Transport
	0,  // 4: ModifyCameraRequest.mode:type_name -> RecordingMode
	14, // 5: GetScheduleListResponse.result:type_name -> Schedule
	20, // 6: Settings.GetSettings:input_type -> google.protobuf.Empty
	1,  // 7: Settings.SetSettings:input_type -> CctvSettings
	20, // 8: Cameras.GetCameras:input_type -> google.protobuf.Empty
	2,  // 9: Cameras.AddCamera:input_type -> Camera
	12, // 10: Cameras.ModifyCamera:input_type -> ModifyCameraRequest
	5,  // 11: Cameras.DeleteCamera:input_type -> DeleteCameraRequest
	6,  // 12: Cameras.GetLiveUri:input_type -> GetLiveUriRequest
	8,  // 13: Cameras.GetReplayUri:input_type -> GetReplayUriRequest
	10, // 14: Cameras.GetSnapshot:input_type -> GetSnapshotRequest
	13, // 15: Cameras.SetNobodyAtHomeMode:input_type -> SetNobodyAtHomeModeRequest
	20, // 16: Schedules.GetSchedulesList:input_type -> google.protobuf.Empty
	17, // 17: Schedules.GetSchedule:input_type -> GetScheduleRequest
	14, // 18: Schedules.AddSchedule:input_type -> Schedule
	14, // 19: Schedules.ModifySchedule:input_type -> Schedule
	18, // 20: Schedules.DeleteSchedule:input_type -> DeleteScheduleRequest
	1,  // 21: Settings.GetSettings:output_type -> CctvSettings
	20, // 22: Settings.SetSettings:output_type -> google.protobuf.Empty
	3,  // 23: Cameras.GetCameras:output_type -> GetCamerasResponse
	4,  // 24: Cameras.AddCamera:output_type -> AddCameraResponse
	20, // 25: Cameras.ModifyCamera:output_type -> google.protobuf.Empty
	20, // 26: Cameras.DeleteCamera:output_type -> google.protobuf.Empty
	7,  // 27: Cameras.GetLiveUri:output_type -> GetUriResponse
	9,  // 28: Cameras.GetReplayUri:output_type -> GetReplayUriResponse
	11, // 29: Cameras.GetSnapshot:output_type -> GetSnapshotResponse
	20, // 30: Cameras.SetNobodyAtHomeMode:output_type -> google.protobuf.Empty
	16, // 31: Schedules.GetSchedulesList:output_type -> GetScheduleListResponse
	14, // 32: Schedules.GetSchedule:output_type -> Schedule
	15, // 33: Schedules.AddSchedule:output_type -> AddScheduleResponse
	20, // 34: Schedules.ModifySchedule:output_type -> google.protobuf.Empty
	20, // 35: Schedules.DeleteSchedule:output_type -> google.protobuf.Empty
	21, // [21:36] is the sub-list for method output_type
	6,  // [6:21] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_rms_cctv_proto_init() }
func file_rms_cctv_proto_init() {
	if File_rms_cctv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rms_cctv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CctvSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCamerasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCameraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveUriRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUriResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplayUriRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplayUriResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNobodyAtHomeModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rms_cctv_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rms_cctv_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rms_cctv_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_rms_cctv_proto_goTypes,
		DependencyIndexes: file_rms_cctv_proto_depIdxs,
		EnumInfos:         file_rms_cctv_proto_enumTypes,
		MessageInfos:      file_rms_cctv_proto_msgTypes,
	}.Build()
	File_rms_cctv_proto = out.File
	file_rms_cctv_proto_rawDesc = nil
	file_rms_cctv_proto_goTypes = nil
	file_rms_cctv_proto_depIdxs = nil
}
