// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-cctv.proto

package rms_cctv

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RmsCctv service

func NewRmsCctvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RmsCctv service

type RmsCctvService interface {
	// получить список камер
	GetCameras(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetCamerasResponse, error)
	// Добавить камеру
	AddCamera(ctx context.Context, in *Camera, opts ...client.CallOption) (*AddCameraResponse, error)
	// Изменить настройки камеры
	ModifyCamera(ctx context.Context, in *Camera, opts ...client.CallOption) (*emptypb.Empty, error)
	// Удалить камеру
	DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Получить URI для проигрывания
	GetLiveUri(ctx context.Context, in *GetLiveUriRequest, opts ...client.CallOption) (*GetLiveUriResponse, error)
	// Получить URI для проигрывания архива
	GetReplayUri(ctx context.Context, in *GetReplayUriRequest, opts ...client.CallOption) (*GetReplayUriRequest, error)
	// Получить изображение с камеры
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...client.CallOption) (*GetSnapshotResponse, error)
}

type rmsCctvService struct {
	c    client.Client
	name string
}

func NewRmsCctvService(name string, c client.Client) RmsCctvService {
	return &rmsCctvService{
		c:    c,
		name: name,
	}
}

func (c *rmsCctvService) GetCameras(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetCamerasResponse, error) {
	req := c.c.NewRequest(c.name, "RmsCctv.GetCameras", in)
	out := new(GetCamerasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsCctvService) AddCamera(ctx context.Context, in *Camera, opts ...client.CallOption) (*AddCameraResponse, error) {
	req := c.c.NewRequest(c.name, "RmsCctv.AddCamera", in)
	out := new(AddCameraResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsCctvService) ModifyCamera(ctx context.Context, in *Camera, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsCctv.ModifyCamera", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsCctvService) DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsCctv.DeleteCamera", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsCctvService) GetLiveUri(ctx context.Context, in *GetLiveUriRequest, opts ...client.CallOption) (*GetLiveUriResponse, error) {
	req := c.c.NewRequest(c.name, "RmsCctv.GetLiveUri", in)
	out := new(GetLiveUriResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsCctvService) GetReplayUri(ctx context.Context, in *GetReplayUriRequest, opts ...client.CallOption) (*GetReplayUriRequest, error) {
	req := c.c.NewRequest(c.name, "RmsCctv.GetReplayUri", in)
	out := new(GetReplayUriRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsCctvService) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...client.CallOption) (*GetSnapshotResponse, error) {
	req := c.c.NewRequest(c.name, "RmsCctv.GetSnapshot", in)
	out := new(GetSnapshotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RmsCctv service

type RmsCctvHandler interface {
	// получить список камер
	GetCameras(context.Context, *emptypb.Empty, *GetCamerasResponse) error
	// Добавить камеру
	AddCamera(context.Context, *Camera, *AddCameraResponse) error
	// Изменить настройки камеры
	ModifyCamera(context.Context, *Camera, *emptypb.Empty) error
	// Удалить камеру
	DeleteCamera(context.Context, *DeleteCameraRequest, *emptypb.Empty) error
	// Получить URI для проигрывания
	GetLiveUri(context.Context, *GetLiveUriRequest, *GetLiveUriResponse) error
	// Получить URI для проигрывания архива
	GetReplayUri(context.Context, *GetReplayUriRequest, *GetReplayUriRequest) error
	// Получить изображение с камеры
	GetSnapshot(context.Context, *GetSnapshotRequest, *GetSnapshotResponse) error
}

func RegisterRmsCctvHandler(s server.Server, hdlr RmsCctvHandler, opts ...server.HandlerOption) error {
	type rmsCctv interface {
		GetCameras(ctx context.Context, in *emptypb.Empty, out *GetCamerasResponse) error
		AddCamera(ctx context.Context, in *Camera, out *AddCameraResponse) error
		ModifyCamera(ctx context.Context, in *Camera, out *emptypb.Empty) error
		DeleteCamera(ctx context.Context, in *DeleteCameraRequest, out *emptypb.Empty) error
		GetLiveUri(ctx context.Context, in *GetLiveUriRequest, out *GetLiveUriResponse) error
		GetReplayUri(ctx context.Context, in *GetReplayUriRequest, out *GetReplayUriRequest) error
		GetSnapshot(ctx context.Context, in *GetSnapshotRequest, out *GetSnapshotResponse) error
	}
	type RmsCctv struct {
		rmsCctv
	}
	h := &rmsCctvHandler{hdlr}
	return s.Handle(s.NewHandler(&RmsCctv{h}, opts...))
}

type rmsCctvHandler struct {
	RmsCctvHandler
}

func (h *rmsCctvHandler) GetCameras(ctx context.Context, in *emptypb.Empty, out *GetCamerasResponse) error {
	return h.RmsCctvHandler.GetCameras(ctx, in, out)
}

func (h *rmsCctvHandler) AddCamera(ctx context.Context, in *Camera, out *AddCameraResponse) error {
	return h.RmsCctvHandler.AddCamera(ctx, in, out)
}

func (h *rmsCctvHandler) ModifyCamera(ctx context.Context, in *Camera, out *emptypb.Empty) error {
	return h.RmsCctvHandler.ModifyCamera(ctx, in, out)
}

func (h *rmsCctvHandler) DeleteCamera(ctx context.Context, in *DeleteCameraRequest, out *emptypb.Empty) error {
	return h.RmsCctvHandler.DeleteCamera(ctx, in, out)
}

func (h *rmsCctvHandler) GetLiveUri(ctx context.Context, in *GetLiveUriRequest, out *GetLiveUriResponse) error {
	return h.RmsCctvHandler.GetLiveUri(ctx, in, out)
}

func (h *rmsCctvHandler) GetReplayUri(ctx context.Context, in *GetReplayUriRequest, out *GetReplayUriRequest) error {
	return h.RmsCctvHandler.GetReplayUri(ctx, in, out)
}

func (h *rmsCctvHandler) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, out *GetSnapshotResponse) error {
	return h.RmsCctvHandler.GetSnapshot(ctx, in, out)
}
