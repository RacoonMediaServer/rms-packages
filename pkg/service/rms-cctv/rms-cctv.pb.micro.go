// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-cctv.proto

package rms_cctv

import (
	fmt "fmt"
	_ "github.com/RacoonMediaServer/rms-packages/pkg/media"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Settings service

func NewSettingsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Settings service

type SettingsService interface {
	// получить настройки сервиса
	GetSettings(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*CctvSettings, error)
	// установить настройки сервиса
	SetSettings(ctx context.Context, in *CctvSettings, opts ...client.CallOption) (*emptypb.Empty, error)
}

type settingsService struct {
	c    client.Client
	name string
}

func NewSettingsService(name string, c client.Client) SettingsService {
	return &settingsService{
		c:    c,
		name: name,
	}
}

func (c *settingsService) GetSettings(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*CctvSettings, error) {
	req := c.c.NewRequest(c.name, "Settings.GetSettings", in)
	out := new(CctvSettings)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsService) SetSettings(ctx context.Context, in *CctvSettings, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Settings.SetSettings", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Settings service

type SettingsHandler interface {
	// получить настройки сервиса
	GetSettings(context.Context, *emptypb.Empty, *CctvSettings) error
	// установить настройки сервиса
	SetSettings(context.Context, *CctvSettings, *emptypb.Empty) error
}

func RegisterSettingsHandler(s server.Server, hdlr SettingsHandler, opts ...server.HandlerOption) error {
	type settings interface {
		GetSettings(ctx context.Context, in *emptypb.Empty, out *CctvSettings) error
		SetSettings(ctx context.Context, in *CctvSettings, out *emptypb.Empty) error
	}
	type Settings struct {
		settings
	}
	h := &settingsHandler{hdlr}
	return s.Handle(s.NewHandler(&Settings{h}, opts...))
}

type settingsHandler struct {
	SettingsHandler
}

func (h *settingsHandler) GetSettings(ctx context.Context, in *emptypb.Empty, out *CctvSettings) error {
	return h.SettingsHandler.GetSettings(ctx, in, out)
}

func (h *settingsHandler) SetSettings(ctx context.Context, in *CctvSettings, out *emptypb.Empty) error {
	return h.SettingsHandler.SetSettings(ctx, in, out)
}

// Api Endpoints for Cameras service

func NewCamerasEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Cameras service

type CamerasService interface {
	// получить список камер
	GetCameras(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetCamerasResponse, error)
	// Добавить камеру
	AddCamera(ctx context.Context, in *Camera, opts ...client.CallOption) (*AddCameraResponse, error)
	// Изменить настройки камеры
	ModifyCamera(ctx context.Context, in *ModifyCameraRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Удалить камеру
	DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Получить URI для проигрывания
	GetLiveUri(ctx context.Context, in *GetLiveUriRequest, opts ...client.CallOption) (*GetUriResponse, error)
	// Получить URI для проигрывания архива
	GetReplayUri(ctx context.Context, in *GetReplayUriRequest, opts ...client.CallOption) (*GetUriResponse, error)
	// Получить изображение с камеры
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...client.CallOption) (*GetSnapshotResponse, error)
}

type camerasService struct {
	c    client.Client
	name string
}

func NewCamerasService(name string, c client.Client) CamerasService {
	return &camerasService{
		c:    c,
		name: name,
	}
}

func (c *camerasService) GetCameras(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetCamerasResponse, error) {
	req := c.c.NewRequest(c.name, "Cameras.GetCameras", in)
	out := new(GetCamerasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *camerasService) AddCamera(ctx context.Context, in *Camera, opts ...client.CallOption) (*AddCameraResponse, error) {
	req := c.c.NewRequest(c.name, "Cameras.AddCamera", in)
	out := new(AddCameraResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *camerasService) ModifyCamera(ctx context.Context, in *ModifyCameraRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Cameras.ModifyCamera", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *camerasService) DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Cameras.DeleteCamera", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *camerasService) GetLiveUri(ctx context.Context, in *GetLiveUriRequest, opts ...client.CallOption) (*GetUriResponse, error) {
	req := c.c.NewRequest(c.name, "Cameras.GetLiveUri", in)
	out := new(GetUriResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *camerasService) GetReplayUri(ctx context.Context, in *GetReplayUriRequest, opts ...client.CallOption) (*GetUriResponse, error) {
	req := c.c.NewRequest(c.name, "Cameras.GetReplayUri", in)
	out := new(GetUriResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *camerasService) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...client.CallOption) (*GetSnapshotResponse, error) {
	req := c.c.NewRequest(c.name, "Cameras.GetSnapshot", in)
	out := new(GetSnapshotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cameras service

type CamerasHandler interface {
	// получить список камер
	GetCameras(context.Context, *emptypb.Empty, *GetCamerasResponse) error
	// Добавить камеру
	AddCamera(context.Context, *Camera, *AddCameraResponse) error
	// Изменить настройки камеры
	ModifyCamera(context.Context, *ModifyCameraRequest, *emptypb.Empty) error
	// Удалить камеру
	DeleteCamera(context.Context, *DeleteCameraRequest, *emptypb.Empty) error
	// Получить URI для проигрывания
	GetLiveUri(context.Context, *GetLiveUriRequest, *GetUriResponse) error
	// Получить URI для проигрывания архива
	GetReplayUri(context.Context, *GetReplayUriRequest, *GetUriResponse) error
	// Получить изображение с камеры
	GetSnapshot(context.Context, *GetSnapshotRequest, *GetSnapshotResponse) error
}

func RegisterCamerasHandler(s server.Server, hdlr CamerasHandler, opts ...server.HandlerOption) error {
	type cameras interface {
		GetCameras(ctx context.Context, in *emptypb.Empty, out *GetCamerasResponse) error
		AddCamera(ctx context.Context, in *Camera, out *AddCameraResponse) error
		ModifyCamera(ctx context.Context, in *ModifyCameraRequest, out *emptypb.Empty) error
		DeleteCamera(ctx context.Context, in *DeleteCameraRequest, out *emptypb.Empty) error
		GetLiveUri(ctx context.Context, in *GetLiveUriRequest, out *GetUriResponse) error
		GetReplayUri(ctx context.Context, in *GetReplayUriRequest, out *GetUriResponse) error
		GetSnapshot(ctx context.Context, in *GetSnapshotRequest, out *GetSnapshotResponse) error
	}
	type Cameras struct {
		cameras
	}
	h := &camerasHandler{hdlr}
	return s.Handle(s.NewHandler(&Cameras{h}, opts...))
}

type camerasHandler struct {
	CamerasHandler
}

func (h *camerasHandler) GetCameras(ctx context.Context, in *emptypb.Empty, out *GetCamerasResponse) error {
	return h.CamerasHandler.GetCameras(ctx, in, out)
}

func (h *camerasHandler) AddCamera(ctx context.Context, in *Camera, out *AddCameraResponse) error {
	return h.CamerasHandler.AddCamera(ctx, in, out)
}

func (h *camerasHandler) ModifyCamera(ctx context.Context, in *ModifyCameraRequest, out *emptypb.Empty) error {
	return h.CamerasHandler.ModifyCamera(ctx, in, out)
}

func (h *camerasHandler) DeleteCamera(ctx context.Context, in *DeleteCameraRequest, out *emptypb.Empty) error {
	return h.CamerasHandler.DeleteCamera(ctx, in, out)
}

func (h *camerasHandler) GetLiveUri(ctx context.Context, in *GetLiveUriRequest, out *GetUriResponse) error {
	return h.CamerasHandler.GetLiveUri(ctx, in, out)
}

func (h *camerasHandler) GetReplayUri(ctx context.Context, in *GetReplayUriRequest, out *GetUriResponse) error {
	return h.CamerasHandler.GetReplayUri(ctx, in, out)
}

func (h *camerasHandler) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, out *GetSnapshotResponse) error {
	return h.CamerasHandler.GetSnapshot(ctx, in, out)
}

// Api Endpoints for Schedules service

func NewSchedulesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Schedules service

type SchedulesService interface {
	// Получить список расписаний
	GetSchedulesList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetScheduleListResponse, error)
	// Получить инфу о расписании
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...client.CallOption) (*Schedule, error)
	// Создать расписание
	AddSchedule(ctx context.Context, in *Schedule, opts ...client.CallOption) (*AddScheduleResponse, error)
	// Изменить расписание
	ModifySchedule(ctx context.Context, in *Schedule, opts ...client.CallOption) (*emptypb.Empty, error)
	// Удалить расписание
	DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type schedulesService struct {
	c    client.Client
	name string
}

func NewSchedulesService(name string, c client.Client) SchedulesService {
	return &schedulesService{
		c:    c,
		name: name,
	}
}

func (c *schedulesService) GetSchedulesList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetScheduleListResponse, error) {
	req := c.c.NewRequest(c.name, "Schedules.GetSchedulesList", in)
	out := new(GetScheduleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesService) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...client.CallOption) (*Schedule, error) {
	req := c.c.NewRequest(c.name, "Schedules.GetSchedule", in)
	out := new(Schedule)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesService) AddSchedule(ctx context.Context, in *Schedule, opts ...client.CallOption) (*AddScheduleResponse, error) {
	req := c.c.NewRequest(c.name, "Schedules.AddSchedule", in)
	out := new(AddScheduleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesService) ModifySchedule(ctx context.Context, in *Schedule, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Schedules.ModifySchedule", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulesService) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Schedules.DeleteSchedule", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Schedules service

type SchedulesHandler interface {
	// Получить список расписаний
	GetSchedulesList(context.Context, *emptypb.Empty, *GetScheduleListResponse) error
	// Получить инфу о расписании
	GetSchedule(context.Context, *GetScheduleRequest, *Schedule) error
	// Создать расписание
	AddSchedule(context.Context, *Schedule, *AddScheduleResponse) error
	// Изменить расписание
	ModifySchedule(context.Context, *Schedule, *emptypb.Empty) error
	// Удалить расписание
	DeleteSchedule(context.Context, *DeleteScheduleRequest, *emptypb.Empty) error
}

func RegisterSchedulesHandler(s server.Server, hdlr SchedulesHandler, opts ...server.HandlerOption) error {
	type schedules interface {
		GetSchedulesList(ctx context.Context, in *emptypb.Empty, out *GetScheduleListResponse) error
		GetSchedule(ctx context.Context, in *GetScheduleRequest, out *Schedule) error
		AddSchedule(ctx context.Context, in *Schedule, out *AddScheduleResponse) error
		ModifySchedule(ctx context.Context, in *Schedule, out *emptypb.Empty) error
		DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, out *emptypb.Empty) error
	}
	type Schedules struct {
		schedules
	}
	h := &schedulesHandler{hdlr}
	return s.Handle(s.NewHandler(&Schedules{h}, opts...))
}

type schedulesHandler struct {
	SchedulesHandler
}

func (h *schedulesHandler) GetSchedulesList(ctx context.Context, in *emptypb.Empty, out *GetScheduleListResponse) error {
	return h.SchedulesHandler.GetSchedulesList(ctx, in, out)
}

func (h *schedulesHandler) GetSchedule(ctx context.Context, in *GetScheduleRequest, out *Schedule) error {
	return h.SchedulesHandler.GetSchedule(ctx, in, out)
}

func (h *schedulesHandler) AddSchedule(ctx context.Context, in *Schedule, out *AddScheduleResponse) error {
	return h.SchedulesHandler.AddSchedule(ctx, in, out)
}

func (h *schedulesHandler) ModifySchedule(ctx context.Context, in *Schedule, out *emptypb.Empty) error {
	return h.SchedulesHandler.ModifySchedule(ctx, in, out)
}

func (h *schedulesHandler) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, out *emptypb.Empty) error {
	return h.SchedulesHandler.DeleteSchedule(ctx, in, out)
}
