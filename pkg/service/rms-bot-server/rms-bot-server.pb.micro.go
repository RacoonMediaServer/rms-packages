// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-bot-server.proto

package rms_bot_server

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RmsBotServer service

func NewRmsBotServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RmsBotServer service

type RmsBotServerService interface {
	// Дропнуть сессию указанного клиента
	DropSession(ctx context.Context, in *DropSessionRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type rmsBotServerService struct {
	c    client.Client
	name string
}

func NewRmsBotServerService(name string, c client.Client) RmsBotServerService {
	return &rmsBotServerService{
		c:    c,
		name: name,
	}
}

func (c *rmsBotServerService) DropSession(ctx context.Context, in *DropSessionRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsBotServer.DropSession", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RmsBotServer service

type RmsBotServerHandler interface {
	// Дропнуть сессию указанного клиента
	DropSession(context.Context, *DropSessionRequest, *emptypb.Empty) error
}

func RegisterRmsBotServerHandler(s server.Server, hdlr RmsBotServerHandler, opts ...server.HandlerOption) error {
	type rmsBotServer interface {
		DropSession(ctx context.Context, in *DropSessionRequest, out *emptypb.Empty) error
	}
	type RmsBotServer struct {
		rmsBotServer
	}
	h := &rmsBotServerHandler{hdlr}
	return s.Handle(s.NewHandler(&RmsBotServer{h}, opts...))
}

type rmsBotServerHandler struct {
	RmsBotServerHandler
}

func (h *rmsBotServerHandler) DropSession(ctx context.Context, in *DropSessionRequest, out *emptypb.Empty) error {
	return h.RmsBotServerHandler.DropSession(ctx, in, out)
}
