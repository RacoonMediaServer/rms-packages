// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-notes.proto

package rms_notes

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RmsNotes service

func NewRmsNotesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RmsNotes service

type RmsNotesService interface {
	// Может ли пользователь Telegram работать с заметками
	IsUserLogged(ctx context.Context, in *IsUserLoggedRequest, opts ...client.CallOption) (*IsUserLoggedResponse, error)
	// Привязать заметки к учетной записи пользователя Telegram
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserLoginResponse, error)
	// Добавить заметку
	AddNote(ctx context.Context, in *AddNoteRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Добавить задачу
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Отложить задачу
	SnoozeTask(ctx context.Context, in *SnoozeTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Удалить задачу
	RemoveTask(ctx context.Context, in *RemoveTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Закрыть задачу
	DoneTask(ctx context.Context, in *DoneTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Отправить напоминания о текущих задачах
	SendTasksNotification(ctx context.Context, in *SendTasksNotificationRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// Получить настройки
	GetSettings(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*NotesSettings, error)
	// Установить настройки
	SetSettings(ctx context.Context, in *NotesSettings, opts ...client.CallOption) (*emptypb.Empty, error)
}

type rmsNotesService struct {
	c    client.Client
	name string
}

func NewRmsNotesService(name string, c client.Client) RmsNotesService {
	return &rmsNotesService{
		c:    c,
		name: name,
	}
}

func (c *rmsNotesService) IsUserLogged(ctx context.Context, in *IsUserLoggedRequest, opts ...client.CallOption) (*IsUserLoggedResponse, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.IsUserLogged", in)
	out := new(IsUserLoggedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserLoginResponse, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.UserLogin", in)
	out := new(UserLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) AddNote(ctx context.Context, in *AddNoteRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.AddNote", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) AddTask(ctx context.Context, in *AddTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.AddTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) SnoozeTask(ctx context.Context, in *SnoozeTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.SnoozeTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) RemoveTask(ctx context.Context, in *RemoveTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.RemoveTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) DoneTask(ctx context.Context, in *DoneTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.DoneTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) SendTasksNotification(ctx context.Context, in *SendTasksNotificationRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.SendTasksNotification", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) GetSettings(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*NotesSettings, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.GetSettings", in)
	out := new(NotesSettings)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsNotesService) SetSettings(ctx context.Context, in *NotesSettings, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsNotes.SetSettings", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RmsNotes service

type RmsNotesHandler interface {
	// Может ли пользователь Telegram работать с заметками
	IsUserLogged(context.Context, *IsUserLoggedRequest, *IsUserLoggedResponse) error
	// Привязать заметки к учетной записи пользователя Telegram
	UserLogin(context.Context, *UserLoginRequest, *UserLoginResponse) error
	// Добавить заметку
	AddNote(context.Context, *AddNoteRequest, *emptypb.Empty) error
	// Добавить задачу
	AddTask(context.Context, *AddTaskRequest, *emptypb.Empty) error
	// Отложить задачу
	SnoozeTask(context.Context, *SnoozeTaskRequest, *emptypb.Empty) error
	// Удалить задачу
	RemoveTask(context.Context, *RemoveTaskRequest, *emptypb.Empty) error
	// Закрыть задачу
	DoneTask(context.Context, *DoneTaskRequest, *emptypb.Empty) error
	// Отправить напоминания о текущих задачах
	SendTasksNotification(context.Context, *SendTasksNotificationRequest, *emptypb.Empty) error
	// Получить настройки
	GetSettings(context.Context, *emptypb.Empty, *NotesSettings) error
	// Установить настройки
	SetSettings(context.Context, *NotesSettings, *emptypb.Empty) error
}

func RegisterRmsNotesHandler(s server.Server, hdlr RmsNotesHandler, opts ...server.HandlerOption) error {
	type rmsNotes interface {
		IsUserLogged(ctx context.Context, in *IsUserLoggedRequest, out *IsUserLoggedResponse) error
		UserLogin(ctx context.Context, in *UserLoginRequest, out *UserLoginResponse) error
		AddNote(ctx context.Context, in *AddNoteRequest, out *emptypb.Empty) error
		AddTask(ctx context.Context, in *AddTaskRequest, out *emptypb.Empty) error
		SnoozeTask(ctx context.Context, in *SnoozeTaskRequest, out *emptypb.Empty) error
		RemoveTask(ctx context.Context, in *RemoveTaskRequest, out *emptypb.Empty) error
		DoneTask(ctx context.Context, in *DoneTaskRequest, out *emptypb.Empty) error
		SendTasksNotification(ctx context.Context, in *SendTasksNotificationRequest, out *emptypb.Empty) error
		GetSettings(ctx context.Context, in *emptypb.Empty, out *NotesSettings) error
		SetSettings(ctx context.Context, in *NotesSettings, out *emptypb.Empty) error
	}
	type RmsNotes struct {
		rmsNotes
	}
	h := &rmsNotesHandler{hdlr}
	return s.Handle(s.NewHandler(&RmsNotes{h}, opts...))
}

type rmsNotesHandler struct {
	RmsNotesHandler
}

func (h *rmsNotesHandler) IsUserLogged(ctx context.Context, in *IsUserLoggedRequest, out *IsUserLoggedResponse) error {
	return h.RmsNotesHandler.IsUserLogged(ctx, in, out)
}

func (h *rmsNotesHandler) UserLogin(ctx context.Context, in *UserLoginRequest, out *UserLoginResponse) error {
	return h.RmsNotesHandler.UserLogin(ctx, in, out)
}

func (h *rmsNotesHandler) AddNote(ctx context.Context, in *AddNoteRequest, out *emptypb.Empty) error {
	return h.RmsNotesHandler.AddNote(ctx, in, out)
}

func (h *rmsNotesHandler) AddTask(ctx context.Context, in *AddTaskRequest, out *emptypb.Empty) error {
	return h.RmsNotesHandler.AddTask(ctx, in, out)
}

func (h *rmsNotesHandler) SnoozeTask(ctx context.Context, in *SnoozeTaskRequest, out *emptypb.Empty) error {
	return h.RmsNotesHandler.SnoozeTask(ctx, in, out)
}

func (h *rmsNotesHandler) RemoveTask(ctx context.Context, in *RemoveTaskRequest, out *emptypb.Empty) error {
	return h.RmsNotesHandler.RemoveTask(ctx, in, out)
}

func (h *rmsNotesHandler) DoneTask(ctx context.Context, in *DoneTaskRequest, out *emptypb.Empty) error {
	return h.RmsNotesHandler.DoneTask(ctx, in, out)
}

func (h *rmsNotesHandler) SendTasksNotification(ctx context.Context, in *SendTasksNotificationRequest, out *emptypb.Empty) error {
	return h.RmsNotesHandler.SendTasksNotification(ctx, in, out)
}

func (h *rmsNotesHandler) GetSettings(ctx context.Context, in *emptypb.Empty, out *NotesSettings) error {
	return h.RmsNotesHandler.GetSettings(ctx, in, out)
}

func (h *rmsNotesHandler) SetSettings(ctx context.Context, in *NotesSettings, out *emptypb.Empty) error {
	return h.RmsNotesHandler.SetSettings(ctx, in, out)
}
