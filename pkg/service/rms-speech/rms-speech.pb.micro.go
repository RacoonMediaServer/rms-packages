// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-speech.proto

package rms_speech

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Speech service

func NewSpeechEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Speech service

type SpeechService interface {
	// Запустить процесс распознавания речи
	StartRecognition(ctx context.Context, in *StartRecognitionRequest, opts ...client.CallOption) (*StartRecognitionResponse, error)
	// Получить статус задачи распознавания
	GetRecognitionStatus(ctx context.Context, in *GetRecognitionStatusRequest, opts ...client.CallOption) (*GetRecognitionStatusResponse, error)
	// Отменить задачу
	StopRecognition(ctx context.Context, in *StopRecognitionRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type speechService struct {
	c    client.Client
	name string
}

func NewSpeechService(name string, c client.Client) SpeechService {
	return &speechService{
		c:    c,
		name: name,
	}
}

func (c *speechService) StartRecognition(ctx context.Context, in *StartRecognitionRequest, opts ...client.CallOption) (*StartRecognitionResponse, error) {
	req := c.c.NewRequest(c.name, "Speech.StartRecognition", in)
	out := new(StartRecognitionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechService) GetRecognitionStatus(ctx context.Context, in *GetRecognitionStatusRequest, opts ...client.CallOption) (*GetRecognitionStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Speech.GetRecognitionStatus", in)
	out := new(GetRecognitionStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechService) StopRecognition(ctx context.Context, in *StopRecognitionRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Speech.StopRecognition", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Speech service

type SpeechHandler interface {
	// Запустить процесс распознавания речи
	StartRecognition(context.Context, *StartRecognitionRequest, *StartRecognitionResponse) error
	// Получить статус задачи распознавания
	GetRecognitionStatus(context.Context, *GetRecognitionStatusRequest, *GetRecognitionStatusResponse) error
	// Отменить задачу
	StopRecognition(context.Context, *StopRecognitionRequest, *emptypb.Empty) error
}

func RegisterSpeechHandler(s server.Server, hdlr SpeechHandler, opts ...server.HandlerOption) error {
	type speech interface {
		StartRecognition(ctx context.Context, in *StartRecognitionRequest, out *StartRecognitionResponse) error
		GetRecognitionStatus(ctx context.Context, in *GetRecognitionStatusRequest, out *GetRecognitionStatusResponse) error
		StopRecognition(ctx context.Context, in *StopRecognitionRequest, out *emptypb.Empty) error
	}
	type Speech struct {
		speech
	}
	h := &speechHandler{hdlr}
	return s.Handle(s.NewHandler(&Speech{h}, opts...))
}

type speechHandler struct {
	SpeechHandler
}

func (h *speechHandler) StartRecognition(ctx context.Context, in *StartRecognitionRequest, out *StartRecognitionResponse) error {
	return h.SpeechHandler.StartRecognition(ctx, in, out)
}

func (h *speechHandler) GetRecognitionStatus(ctx context.Context, in *GetRecognitionStatusRequest, out *GetRecognitionStatusResponse) error {
	return h.SpeechHandler.GetRecognitionStatus(ctx, in, out)
}

func (h *speechHandler) StopRecognition(ctx context.Context, in *StopRecognitionRequest, out *emptypb.Empty) error {
	return h.SpeechHandler.StopRecognition(ctx, in, out)
}
