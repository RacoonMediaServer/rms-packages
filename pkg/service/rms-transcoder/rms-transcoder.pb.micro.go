// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-transcoder.proto

package rms_transcoder

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Profiles service

func NewProfilesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Profiles service

type ProfilesService interface {
	// Добавить профиль с параметрами транскодирования
	AddProfile(ctx context.Context, in *Profile, opts ...client.CallOption) (*emptypb.Empty, error)
	// Получить все профили
	GetProfiles(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetProfilesResponse, error)
	// Удалить профиль
	RemoveProfile(ctx context.Context, in *RemoveProfileRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type profilesService struct {
	c    client.Client
	name string
}

func NewProfilesService(name string, c client.Client) ProfilesService {
	return &profilesService{
		c:    c,
		name: name,
	}
}

func (c *profilesService) AddProfile(ctx context.Context, in *Profile, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Profiles.AddProfile", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesService) GetProfiles(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetProfilesResponse, error) {
	req := c.c.NewRequest(c.name, "Profiles.GetProfiles", in)
	out := new(GetProfilesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesService) RemoveProfile(ctx context.Context, in *RemoveProfileRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Profiles.RemoveProfile", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profiles service

type ProfilesHandler interface {
	// Добавить профиль с параметрами транскодирования
	AddProfile(context.Context, *Profile, *emptypb.Empty) error
	// Получить все профили
	GetProfiles(context.Context, *emptypb.Empty, *GetProfilesResponse) error
	// Удалить профиль
	RemoveProfile(context.Context, *RemoveProfileRequest, *emptypb.Empty) error
}

func RegisterProfilesHandler(s server.Server, hdlr ProfilesHandler, opts ...server.HandlerOption) error {
	type profiles interface {
		AddProfile(ctx context.Context, in *Profile, out *emptypb.Empty) error
		GetProfiles(ctx context.Context, in *emptypb.Empty, out *GetProfilesResponse) error
		RemoveProfile(ctx context.Context, in *RemoveProfileRequest, out *emptypb.Empty) error
	}
	type Profiles struct {
		profiles
	}
	h := &profilesHandler{hdlr}
	return s.Handle(s.NewHandler(&Profiles{h}, opts...))
}

type profilesHandler struct {
	ProfilesHandler
}

func (h *profilesHandler) AddProfile(ctx context.Context, in *Profile, out *emptypb.Empty) error {
	return h.ProfilesHandler.AddProfile(ctx, in, out)
}

func (h *profilesHandler) GetProfiles(ctx context.Context, in *emptypb.Empty, out *GetProfilesResponse) error {
	return h.ProfilesHandler.GetProfiles(ctx, in, out)
}

func (h *profilesHandler) RemoveProfile(ctx context.Context, in *RemoveProfileRequest, out *emptypb.Empty) error {
	return h.ProfilesHandler.RemoveProfile(ctx, in, out)
}

// Api Endpoints for Transcoder service

func NewTranscoderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Transcoder service

type TranscoderService interface {
	// Добавить задачу транскодирования
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...client.CallOption) (*AddTaskResponse, error)
	// Получить статус задачи
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error)
	// Отменить задачу (должно вызываться для каждой запущенной задачи)
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type transcoderService struct {
	c    client.Client
	name string
}

func NewTranscoderService(name string, c client.Client) TranscoderService {
	return &transcoderService{
		c:    c,
		name: name,
	}
}

func (c *transcoderService) AddTask(ctx context.Context, in *AddTaskRequest, opts ...client.CallOption) (*AddTaskResponse, error) {
	req := c.c.NewRequest(c.name, "Transcoder.AddTask", in)
	out := new(AddTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcoderService) GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error) {
	req := c.c.NewRequest(c.name, "Transcoder.GetTask", in)
	out := new(GetTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcoderService) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Transcoder.CancelTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transcoder service

type TranscoderHandler interface {
	// Добавить задачу транскодирования
	AddTask(context.Context, *AddTaskRequest, *AddTaskResponse) error
	// Получить статус задачи
	GetTask(context.Context, *GetTaskRequest, *GetTaskResponse) error
	// Отменить задачу (должно вызываться для каждой запущенной задачи)
	CancelTask(context.Context, *CancelTaskRequest, *emptypb.Empty) error
}

func RegisterTranscoderHandler(s server.Server, hdlr TranscoderHandler, opts ...server.HandlerOption) error {
	type transcoder interface {
		AddTask(ctx context.Context, in *AddTaskRequest, out *AddTaskResponse) error
		GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error
		CancelTask(ctx context.Context, in *CancelTaskRequest, out *emptypb.Empty) error
	}
	type Transcoder struct {
		transcoder
	}
	h := &transcoderHandler{hdlr}
	return s.Handle(s.NewHandler(&Transcoder{h}, opts...))
}

type transcoderHandler struct {
	TranscoderHandler
}

func (h *transcoderHandler) AddTask(ctx context.Context, in *AddTaskRequest, out *AddTaskResponse) error {
	return h.TranscoderHandler.AddTask(ctx, in, out)
}

func (h *transcoderHandler) GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error {
	return h.TranscoderHandler.GetTask(ctx, in, out)
}

func (h *transcoderHandler) CancelTask(ctx context.Context, in *CancelTaskRequest, out *emptypb.Empty) error {
	return h.TranscoderHandler.CancelTask(ctx, in, out)
}
