// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-bot-client.proto

package rms_bot_client

import (
	fmt "fmt"
	communication "github.com/RacoonMediaServer/rms-packages/pkg/communication"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RmsBotClient service

func NewRmsBotClientEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RmsBotClient service

type RmsBotClientService interface {
	// Получить код для идентификации на сервере
	GetIdentificationCode(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetIdentificationCodeResponse, error)
	// Отправить сообщение в бот
	SendMessage(ctx context.Context, in *communication.BotMessage, opts ...client.CallOption) (*emptypb.Empty, error)
}

type rmsBotClientService struct {
	c    client.Client
	name string
}

func NewRmsBotClientService(name string, c client.Client) RmsBotClientService {
	return &rmsBotClientService{
		c:    c,
		name: name,
	}
}

func (c *rmsBotClientService) GetIdentificationCode(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetIdentificationCodeResponse, error) {
	req := c.c.NewRequest(c.name, "RmsBotClient.GetIdentificationCode", in)
	out := new(GetIdentificationCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsBotClientService) SendMessage(ctx context.Context, in *communication.BotMessage, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsBotClient.SendMessage", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RmsBotClient service

type RmsBotClientHandler interface {
	// Получить код для идентификации на сервере
	GetIdentificationCode(context.Context, *emptypb.Empty, *GetIdentificationCodeResponse) error
	// Отправить сообщение в бот
	SendMessage(context.Context, *communication.BotMessage, *emptypb.Empty) error
}

func RegisterRmsBotClientHandler(s server.Server, hdlr RmsBotClientHandler, opts ...server.HandlerOption) error {
	type rmsBotClient interface {
		GetIdentificationCode(ctx context.Context, in *emptypb.Empty, out *GetIdentificationCodeResponse) error
		SendMessage(ctx context.Context, in *communication.BotMessage, out *emptypb.Empty) error
	}
	type RmsBotClient struct {
		rmsBotClient
	}
	h := &rmsBotClientHandler{hdlr}
	return s.Handle(s.NewHandler(&RmsBotClient{h}, opts...))
}

type rmsBotClientHandler struct {
	RmsBotClientHandler
}

func (h *rmsBotClientHandler) GetIdentificationCode(ctx context.Context, in *emptypb.Empty, out *GetIdentificationCodeResponse) error {
	return h.RmsBotClientHandler.GetIdentificationCode(ctx, in, out)
}

func (h *rmsBotClientHandler) SendMessage(ctx context.Context, in *communication.BotMessage, out *emptypb.Empty) error {
	return h.RmsBotClientHandler.SendMessage(ctx, in, out)
}
