// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-users.proto

package rms_users

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RmsUsers service

func NewRmsUsersEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RmsUsers service

type RmsUsersService interface {
	// Проверить наличие прав у пользователя
	CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...client.CallOption) (*CheckPermissionsResponse, error)
	// Регистрация нового пользователя
	RegisterUser(ctx context.Context, in *User, opts ...client.CallOption) (*RegisterUserResponse, error)
	// Получить аккаунт пользователя по его идентификатору в Telegram
	GetUserByTelegramId(ctx context.Context, in *GetUserByTelegramIdRequest, opts ...client.CallOption) (*User, error)
	// Получить список пользователей с правами администратора
	GetAdminUsers(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetAdminUsersResponse, error)
}

type rmsUsersService struct {
	c    client.Client
	name string
}

func NewRmsUsersService(name string, c client.Client) RmsUsersService {
	return &rmsUsersService{
		c:    c,
		name: name,
	}
}

func (c *rmsUsersService) CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...client.CallOption) (*CheckPermissionsResponse, error) {
	req := c.c.NewRequest(c.name, "RmsUsers.CheckPermissions", in)
	out := new(CheckPermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsUsersService) RegisterUser(ctx context.Context, in *User, opts ...client.CallOption) (*RegisterUserResponse, error) {
	req := c.c.NewRequest(c.name, "RmsUsers.RegisterUser", in)
	out := new(RegisterUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsUsersService) GetUserByTelegramId(ctx context.Context, in *GetUserByTelegramIdRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "RmsUsers.GetUserByTelegramId", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsUsersService) GetAdminUsers(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*GetAdminUsersResponse, error) {
	req := c.c.NewRequest(c.name, "RmsUsers.GetAdminUsers", in)
	out := new(GetAdminUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RmsUsers service

type RmsUsersHandler interface {
	// Проверить наличие прав у пользователя
	CheckPermissions(context.Context, *CheckPermissionsRequest, *CheckPermissionsResponse) error
	// Регистрация нового пользователя
	RegisterUser(context.Context, *User, *RegisterUserResponse) error
	// Получить аккаунт пользователя по его идентификатору в Telegram
	GetUserByTelegramId(context.Context, *GetUserByTelegramIdRequest, *User) error
	// Получить список пользователей с правами администратора
	GetAdminUsers(context.Context, *emptypb.Empty, *GetAdminUsersResponse) error
}

func RegisterRmsUsersHandler(s server.Server, hdlr RmsUsersHandler, opts ...server.HandlerOption) error {
	type rmsUsers interface {
		CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, out *CheckPermissionsResponse) error
		RegisterUser(ctx context.Context, in *User, out *RegisterUserResponse) error
		GetUserByTelegramId(ctx context.Context, in *GetUserByTelegramIdRequest, out *User) error
		GetAdminUsers(ctx context.Context, in *emptypb.Empty, out *GetAdminUsersResponse) error
	}
	type RmsUsers struct {
		rmsUsers
	}
	h := &rmsUsersHandler{hdlr}
	return s.Handle(s.NewHandler(&RmsUsers{h}, opts...))
}

type rmsUsersHandler struct {
	RmsUsersHandler
}

func (h *rmsUsersHandler) CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, out *CheckPermissionsResponse) error {
	return h.RmsUsersHandler.CheckPermissions(ctx, in, out)
}

func (h *rmsUsersHandler) RegisterUser(ctx context.Context, in *User, out *RegisterUserResponse) error {
	return h.RmsUsersHandler.RegisterUser(ctx, in, out)
}

func (h *rmsUsersHandler) GetUserByTelegramId(ctx context.Context, in *GetUserByTelegramIdRequest, out *User) error {
	return h.RmsUsersHandler.GetUserByTelegramId(ctx, in, out)
}

func (h *rmsUsersHandler) GetAdminUsers(ctx context.Context, in *emptypb.Empty, out *GetAdminUsersResponse) error {
	return h.RmsUsersHandler.GetAdminUsers(ctx, in, out)
}
