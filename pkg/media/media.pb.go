// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: media.proto

package media

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transport int32

const (
	Transport_RTSP               Transport = 0
	Transport_HTTP_HLS_MPEGTS    Transport = 1
	Transport_HTTP_HLS_MP4       Transport = 2
	Transport_HTTP_HLS_ONE_CHUNK Transport = 3
	Transport_HTTP_MP4           Transport = 4
	Transport_HTTP_FLV           Transport = 5
	Transport_HTTP_MPEGTS        Transport = 6
	Transport_HTTP_DASH          Transport = 7
)

// Enum value maps for Transport.
var (
	Transport_name = map[int32]string{
		0: "RTSP",
		1: "HTTP_HLS_MPEGTS",
		2: "HTTP_HLS_MP4",
		3: "HTTP_HLS_ONE_CHUNK",
		4: "HTTP_MP4",
		5: "HTTP_FLV",
		6: "HTTP_MPEGTS",
		7: "HTTP_DASH",
	}
	Transport_value = map[string]int32{
		"RTSP":               0,
		"HTTP_HLS_MPEGTS":    1,
		"HTTP_HLS_MP4":       2,
		"HTTP_HLS_ONE_CHUNK": 3,
		"HTTP_MP4":           4,
		"HTTP_FLV":           5,
		"HTTP_MPEGTS":        6,
		"HTTP_DASH":          7,
	}
)

func (x Transport) Enum() *Transport {
	p := new(Transport)
	*p = x
	return p
}

func (x Transport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transport) Descriptor() protoreflect.EnumDescriptor {
	return file_media_proto_enumTypes[0].Descriptor()
}

func (Transport) Type() protoreflect.EnumType {
	return &file_media_proto_enumTypes[0]
}

func (x Transport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transport.Descriptor instead.
func (Transport) EnumDescriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

type VideoTranscodingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Название кодека в нотации FFmpeg
	Codec *string `protobuf:"bytes,1,opt,name=codec,proto3,oneof" json:"codec,omitempty"`
	// Ширина
	Width *uint32 `protobuf:"varint,2,opt,name=width,proto3,oneof" json:"width,omitempty"`
	// Высота
	Height *uint32 `protobuf:"varint,3,opt,name=height,proto3,oneof" json:"height,omitempty"`
	// Битрейт
	Bitrate *int64 `protobuf:"varint,4,opt,name=bitrate,proto3,oneof" json:"bitrate,omitempty"`
}

func (x *VideoTranscodingSettings) Reset() {
	*x = VideoTranscodingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTranscodingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranscodingSettings) ProtoMessage() {}

func (x *VideoTranscodingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranscodingSettings.ProtoReflect.Descriptor instead.
func (*VideoTranscodingSettings) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *VideoTranscodingSettings) GetCodec() string {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return ""
}

func (x *VideoTranscodingSettings) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *VideoTranscodingSettings) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *VideoTranscodingSettings) GetBitrate() int64 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

type AudioTranscodingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Название кодека в нотации FFmpeg
	Codec *string `protobuf:"bytes,1,opt,name=codec,proto3,oneof" json:"codec,omitempty"`
	// Битрейт
	Bitrate *int64 `protobuf:"varint,2,opt,name=bitrate,proto3,oneof" json:"bitrate,omitempty"`
}

func (x *AudioTranscodingSettings) Reset() {
	*x = AudioTranscodingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioTranscodingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioTranscodingSettings) ProtoMessage() {}

func (x *AudioTranscodingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioTranscodingSettings.ProtoReflect.Descriptor instead.
func (*AudioTranscodingSettings) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

func (x *AudioTranscodingSettings) GetCodec() string {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return ""
}

func (x *AudioTranscodingSettings) GetBitrate() int64 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

type TranscodingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Настройки транскодирования видео
	Video *VideoTranscodingSettings `protobuf:"bytes,1,opt,name=video,proto3,oneof" json:"video,omitempty"`
	// Настройки транскодирования аудио
	Audio *AudioTranscodingSettings `protobuf:"bytes,2,opt,name=audio,proto3,oneof" json:"audio,omitempty"`
}

func (x *TranscodingSettings) Reset() {
	*x = TranscodingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodingSettings) ProtoMessage() {}

func (x *TranscodingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodingSettings.ProtoReflect.Descriptor instead.
func (*TranscodingSettings) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *TranscodingSettings) GetVideo() *VideoTranscodingSettings {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *TranscodingSettings) GetAudio() *AudioTranscodingSettings {
	if x != nil {
		return x.Audio
	}
	return nil
}

var File_media_proto protoreflect.FileDescriptor

var file_media_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0x6a,
	0x0a, 0x18, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x01,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2a, 0x90,
	0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x54, 0x53, 0x50, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x48,
	0x4c, 0x53, 0x5f, 0x4d, 0x50, 0x45, 0x47, 0x54, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x48, 0x4c, 0x53, 0x5f, 0x4d, 0x50, 0x34, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x48, 0x4c, 0x53, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x48,
	0x55, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x50,
	0x34, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x46, 0x4c, 0x56, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x50, 0x45, 0x47, 0x54, 0x53,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10,
	0x07, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x52, 0x61, 0x63, 0x6f, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x72, 0x6d, 0x73, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData = file_media_proto_rawDesc
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_media_proto_rawDescData)
	})
	return file_media_proto_rawDescData
}

var file_media_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_media_proto_goTypes = []interface{}{
	(Transport)(0),                   // 0: media.Transport
	(*VideoTranscodingSettings)(nil), // 1: media.VideoTranscodingSettings
	(*AudioTranscodingSettings)(nil), // 2: media.AudioTranscodingSettings
	(*TranscodingSettings)(nil),      // 3: media.TranscodingSettings
}
var file_media_proto_depIdxs = []int32{
	1, // 0: media.TranscodingSettings.video:type_name -> media.VideoTranscodingSettings
	2, // 1: media.TranscodingSettings.audio:type_name -> media.AudioTranscodingSettings
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTranscodingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioTranscodingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_media_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_media_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_media_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_media_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		EnumInfos:         file_media_proto_enumTypes,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_rawDesc = nil
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
